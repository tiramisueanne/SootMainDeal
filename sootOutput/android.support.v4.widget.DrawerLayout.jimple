public class android.support.v4.widget.DrawerLayout extends android.view.ViewGroup
{
    private static final boolean ALLOW_EDGE_LOCK;
    private static final boolean CHILDREN_DISALLOW_INTERCEPT;
    private static final int DEFAULT_SCRIM_COLOR;
    private static final int[] LAYOUT_ATTRS;
    public static final int LOCK_MODE_LOCKED_CLOSED;
    public static final int LOCK_MODE_LOCKED_OPEN;
    public static final int LOCK_MODE_UNLOCKED;
    private static final int MIN_DRAWER_MARGIN;
    private static final int MIN_FLING_VELOCITY;
    private static final int PEEK_DELAY;
    public static final int STATE_DRAGGING;
    public static final int STATE_IDLE;
    public static final int STATE_SETTLING;
    private static final java.lang.String TAG;
    private static final float TOUCH_SLOP_SENSITIVITY;
    private final android.support.v4.widget.DrawerLayout$ChildAccessibilityDelegate mChildAccessibilityDelegate;
    private boolean mChildrenCanceledTouch;
    private boolean mDisallowInterceptRequested;
    private int mDrawerState;
    private boolean mFirstLayout;
    private boolean mInLayout;
    private float mInitialMotionX;
    private float mInitialMotionY;
    private final android.support.v4.widget.DrawerLayout$ViewDragCallback mLeftCallback;
    private final android.support.v4.widget.ViewDragHelper mLeftDragger;
    private android.support.v4.widget.DrawerLayout$DrawerListener mListener;
    private int mLockModeLeft;
    private int mLockModeRight;
    private int mMinDrawerMargin;
    private final android.support.v4.widget.DrawerLayout$ViewDragCallback mRightCallback;
    private final android.support.v4.widget.ViewDragHelper mRightDragger;
    private int mScrimColor;
    private float mScrimOpacity;
    private android.graphics.Paint mScrimPaint;
    private android.graphics.drawable.Drawable mShadowLeft;
    private android.graphics.drawable.Drawable mShadowRight;
    private java.lang.CharSequence mTitleLeft;
    private java.lang.CharSequence mTitleRight;

    static void <clinit>()
    {
        int[] $r0;

        <android.support.v4.widget.DrawerLayout: float TOUCH_SLOP_SENSITIVITY> = 1.0F;

        <android.support.v4.widget.DrawerLayout: java.lang.String TAG> = "DrawerLayout";

        <android.support.v4.widget.DrawerLayout: int STATE_SETTLING> = 2;

        <android.support.v4.widget.DrawerLayout: int STATE_IDLE> = 0;

        <android.support.v4.widget.DrawerLayout: int STATE_DRAGGING> = 1;

        <android.support.v4.widget.DrawerLayout: int PEEK_DELAY> = 160;

        <android.support.v4.widget.DrawerLayout: int MIN_FLING_VELOCITY> = 400;

        <android.support.v4.widget.DrawerLayout: int MIN_DRAWER_MARGIN> = 64;

        <android.support.v4.widget.DrawerLayout: int LOCK_MODE_UNLOCKED> = 0;

        <android.support.v4.widget.DrawerLayout: int LOCK_MODE_LOCKED_OPEN> = 2;

        <android.support.v4.widget.DrawerLayout: int LOCK_MODE_LOCKED_CLOSED> = 1;

        <android.support.v4.widget.DrawerLayout: int DEFAULT_SCRIM_COLOR> = -1728053248;

        <android.support.v4.widget.DrawerLayout: boolean CHILDREN_DISALLOW_INTERCEPT> = 1;

        <android.support.v4.widget.DrawerLayout: boolean ALLOW_EDGE_LOCK> = 0;

        $r0 = newarray (int)[1];

        $r0[0] = 16842931;

        <android.support.v4.widget.DrawerLayout: int[] LAYOUT_ATTRS> = $r0;

        return;
    }

    public void <init>(android.content.Context)
    {
        android.support.v4.widget.DrawerLayout $r0;
        android.content.Context $r1;

        $r0 := @this: android.support.v4.widget.DrawerLayout;

        $r1 := @parameter0: android.content.Context;

        specialinvoke $r0.<android.support.v4.widget.DrawerLayout: void <init>(android.content.Context,android.util.AttributeSet)>($r1, null);

        return;
    }

    public void <init>(android.content.Context, android.util.AttributeSet)
    {
        android.support.v4.widget.DrawerLayout $r0;
        android.content.Context $r1;
        android.util.AttributeSet $r2;

        $r0 := @this: android.support.v4.widget.DrawerLayout;

        $r1 := @parameter0: android.content.Context;

        $r2 := @parameter1: android.util.AttributeSet;

        specialinvoke $r0.<android.support.v4.widget.DrawerLayout: void <init>(android.content.Context,android.util.AttributeSet,int)>($r1, $r2, 0);

        return;
    }

    public void <init>(android.content.Context, android.util.AttributeSet, int)
    {
        android.support.v4.widget.DrawerLayout $r0;
        android.content.Context $r1;
        android.util.AttributeSet $r2;
        int $i0;
        float $f0, $f1;
        android.support.v4.widget.DrawerLayout$ChildAccessibilityDelegate $r3;
        android.graphics.Paint $r4;
        android.content.res.Resources $r5;
        android.util.DisplayMetrics $r6;
        android.support.v4.widget.DrawerLayout$ViewDragCallback $r7;
        android.support.v4.widget.ViewDragHelper $r8;
        android.support.v4.widget.DrawerLayout$AccessibilityDelegate $r9;

        $r0 := @this: android.support.v4.widget.DrawerLayout;

        $r1 := @parameter0: android.content.Context;

        $r2 := @parameter1: android.util.AttributeSet;

        $i0 := @parameter2: int;

        specialinvoke $r0.<android.view.ViewGroup: void <init>(android.content.Context,android.util.AttributeSet,int)>($r1, $r2, $i0);

        $r3 = new android.support.v4.widget.DrawerLayout$ChildAccessibilityDelegate;

        specialinvoke $r3.<android.support.v4.widget.DrawerLayout$ChildAccessibilityDelegate: void <init>(android.support.v4.widget.DrawerLayout)>($r0);

        $r0.<android.support.v4.widget.DrawerLayout: android.support.v4.widget.DrawerLayout$ChildAccessibilityDelegate mChildAccessibilityDelegate> = $r3;

        $r0.<android.support.v4.widget.DrawerLayout: int mScrimColor> = -1728053248;

        $r4 = new android.graphics.Paint;

        specialinvoke $r4.<android.graphics.Paint: void <init>()>();

        $r0.<android.support.v4.widget.DrawerLayout: android.graphics.Paint mScrimPaint> = $r4;

        $r0.<android.support.v4.widget.DrawerLayout: boolean mFirstLayout> = 1;

        $r5 = virtualinvoke $r0.<android.support.v4.widget.DrawerLayout: android.content.res.Resources getResources()>();

        $r6 = virtualinvoke $r5.<android.content.res.Resources: android.util.DisplayMetrics getDisplayMetrics()>();

        $f0 = $r6.<android.util.DisplayMetrics: float density>;

        $f1 = 64.0F * $f0;

        $f1 = $f1 + 0.5F;

        $i0 = (int) $f1;

        $r0.<android.support.v4.widget.DrawerLayout: int mMinDrawerMargin> = $i0;

        $f0 = 400.0F * $f0;

        $r7 = new android.support.v4.widget.DrawerLayout$ViewDragCallback;

        specialinvoke $r7.<android.support.v4.widget.DrawerLayout$ViewDragCallback: void <init>(android.support.v4.widget.DrawerLayout,int)>($r0, 3);

        $r0.<android.support.v4.widget.DrawerLayout: android.support.v4.widget.DrawerLayout$ViewDragCallback mLeftCallback> = $r7;

        $r7 = new android.support.v4.widget.DrawerLayout$ViewDragCallback;

        specialinvoke $r7.<android.support.v4.widget.DrawerLayout$ViewDragCallback: void <init>(android.support.v4.widget.DrawerLayout,int)>($r0, 5);

        $r0.<android.support.v4.widget.DrawerLayout: android.support.v4.widget.DrawerLayout$ViewDragCallback mRightCallback> = $r7;

        $r7 = $r0.<android.support.v4.widget.DrawerLayout: android.support.v4.widget.DrawerLayout$ViewDragCallback mLeftCallback>;

        $r8 = staticinvoke <android.support.v4.widget.ViewDragHelper: android.support.v4.widget.ViewDragHelper create(android.view.ViewGroup,float,android.support.v4.widget.ViewDragHelper$Callback)>($r0, 1.0F, $r7);

        $r0.<android.support.v4.widget.DrawerLayout: android.support.v4.widget.ViewDragHelper mLeftDragger> = $r8;

        $r8 = $r0.<android.support.v4.widget.DrawerLayout: android.support.v4.widget.ViewDragHelper mLeftDragger>;

        virtualinvoke $r8.<android.support.v4.widget.ViewDragHelper: void setEdgeTrackingEnabled(int)>(1);

        $r8 = $r0.<android.support.v4.widget.DrawerLayout: android.support.v4.widget.ViewDragHelper mLeftDragger>;

        virtualinvoke $r8.<android.support.v4.widget.ViewDragHelper: void setMinVelocity(float)>($f0);

        $r7 = $r0.<android.support.v4.widget.DrawerLayout: android.support.v4.widget.DrawerLayout$ViewDragCallback mLeftCallback>;

        $r8 = $r0.<android.support.v4.widget.DrawerLayout: android.support.v4.widget.ViewDragHelper mLeftDragger>;

        virtualinvoke $r7.<android.support.v4.widget.DrawerLayout$ViewDragCallback: void setDragger(android.support.v4.widget.ViewDragHelper)>($r8);

        $r7 = $r0.<android.support.v4.widget.DrawerLayout: android.support.v4.widget.DrawerLayout$ViewDragCallback mRightCallback>;

        $r8 = staticinvoke <android.support.v4.widget.ViewDragHelper: android.support.v4.widget.ViewDragHelper create(android.view.ViewGroup,float,android.support.v4.widget.ViewDragHelper$Callback)>($r0, 1.0F, $r7);

        $r0.<android.support.v4.widget.DrawerLayout: android.support.v4.widget.ViewDragHelper mRightDragger> = $r8;

        $r8 = $r0.<android.support.v4.widget.DrawerLayout: android.support.v4.widget.ViewDragHelper mRightDragger>;

        virtualinvoke $r8.<android.support.v4.widget.ViewDragHelper: void setEdgeTrackingEnabled(int)>(2);

        $r8 = $r0.<android.support.v4.widget.DrawerLayout: android.support.v4.widget.ViewDragHelper mRightDragger>;

        virtualinvoke $r8.<android.support.v4.widget.ViewDragHelper: void setMinVelocity(float)>($f0);

        $r7 = $r0.<android.support.v4.widget.DrawerLayout: android.support.v4.widget.DrawerLayout$ViewDragCallback mRightCallback>;

        $r8 = $r0.<android.support.v4.widget.DrawerLayout: android.support.v4.widget.ViewDragHelper mRightDragger>;

        virtualinvoke $r7.<android.support.v4.widget.DrawerLayout$ViewDragCallback: void setDragger(android.support.v4.widget.ViewDragHelper)>($r8);

        virtualinvoke $r0.<android.support.v4.widget.DrawerLayout: void setFocusableInTouchMode(boolean)>(1);

        staticinvoke <android.support.v4.view.ViewCompat: void setImportantForAccessibility(android.view.View,int)>($r0, 1);

        $r9 = new android.support.v4.widget.DrawerLayout$AccessibilityDelegate;

        specialinvoke $r9.<android.support.v4.widget.DrawerLayout$AccessibilityDelegate: void <init>(android.support.v4.widget.DrawerLayout)>($r0);

        staticinvoke <android.support.v4.view.ViewCompat: void setAccessibilityDelegate(android.view.View,android.support.v4.view.AccessibilityDelegateCompat)>($r0, $r9);

        staticinvoke <android.support.v4.view.ViewGroupCompat: void setMotionEventSplittingEnabled(android.view.ViewGroup,boolean)>($r0, 0);

        return;
    }

    static int[] access$100()
    {
        int[] r0;

        r0 = <android.support.v4.widget.DrawerLayout: int[] LAYOUT_ATTRS>;

        return r0;
    }

    static android.view.View access$200(android.support.v4.widget.DrawerLayout)
    {
        android.support.v4.widget.DrawerLayout $r0;
        android.view.View $r1;

        $r0 := @parameter0: android.support.v4.widget.DrawerLayout;

        $r1 = specialinvoke $r0.<android.support.v4.widget.DrawerLayout: android.view.View findVisibleDrawer()>();

        return $r1;
    }

    static boolean access$300(android.view.View)
    {
        android.view.View $r0;
        boolean $z0;

        $r0 := @parameter0: android.view.View;

        $z0 = staticinvoke <android.support.v4.widget.DrawerLayout: boolean includeChildForAccessibilitiy(android.view.View)>($r0);

        return $z0;
    }

    private android.view.View findVisibleDrawer()
    {
        android.support.v4.widget.DrawerLayout $r0;
        int $i0, $i1;
        android.view.View $r1;
        boolean $z0;

        $r0 := @this: android.support.v4.widget.DrawerLayout;

        $i0 = virtualinvoke $r0.<android.support.v4.widget.DrawerLayout: int getChildCount()>();

        $i1 = 0;

     label1:
        if $i1 >= $i0 goto label3;

        $r1 = virtualinvoke $r0.<android.support.v4.widget.DrawerLayout: android.view.View getChildAt(int)>($i1);

        $z0 = virtualinvoke $r0.<android.support.v4.widget.DrawerLayout: boolean isDrawerView(android.view.View)>($r1);

        if $z0 == 0 goto label2;

        $z0 = virtualinvoke $r0.<android.support.v4.widget.DrawerLayout: boolean isDrawerVisible(android.view.View)>($r1);

        if $z0 == 0 goto label2;

        return $r1;

     label2:
        $i1 = $i1 + 1;

        goto label1;

     label3:
        return null;
    }

    static java.lang.String gravityToString(int)
    {
        int $i0, $i1;
        java.lang.String $r0;

        $i0 := @parameter0: int;

        $i1 = $i0 & 3;

        if $i1 != 3 goto label1;

        return "LEFT";

     label1:
        $i1 = $i0 & 5;

        if $i1 != 5 goto label2;

        return "RIGHT";

     label2:
        $r0 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>($i0);

        return $r0;
    }

    private static boolean hasOpaqueBackground(android.view.View)
    {
        android.view.View $r0;
        android.graphics.drawable.Drawable $r1;
        int $i0;

        $r0 := @parameter0: android.view.View;

        $r1 = virtualinvoke $r0.<android.view.View: android.graphics.drawable.Drawable getBackground()>();

        if $r1 == null goto label1;

        $i0 = virtualinvoke $r1.<android.graphics.drawable.Drawable: int getOpacity()>();

        if $i0 != -1 goto label1;

        return 1;

     label1:
        return 0;
    }

    private boolean hasPeekingDrawer()
    {
        android.support.v4.widget.DrawerLayout $r0;
        int $i0, $i1;
        android.view.View $r1;
        android.view.ViewGroup$LayoutParams $r2;
        android.support.v4.widget.DrawerLayout$LayoutParams $r3;
        boolean $z0;

        $r0 := @this: android.support.v4.widget.DrawerLayout;

        $i0 = virtualinvoke $r0.<android.support.v4.widget.DrawerLayout: int getChildCount()>();

        $i1 = 0;

     label1:
        if $i1 >= $i0 goto label3;

        $r1 = virtualinvoke $r0.<android.support.v4.widget.DrawerLayout: android.view.View getChildAt(int)>($i1);

        $r2 = virtualinvoke $r1.<android.view.View: android.view.ViewGroup$LayoutParams getLayoutParams()>();

        $r3 = (android.support.v4.widget.DrawerLayout$LayoutParams) $r2;

        $z0 = $r3.<android.support.v4.widget.DrawerLayout$LayoutParams: boolean isPeeking>;

        if $z0 == 0 goto label2;

        return 1;

     label2:
        $i1 = $i1 + 1;

        goto label1;

     label3:
        return 0;
    }

    private boolean hasVisibleDrawer()
    {
        android.support.v4.widget.DrawerLayout $r0;
        android.view.View $r1;

        $r0 := @this: android.support.v4.widget.DrawerLayout;

        $r1 = specialinvoke $r0.<android.support.v4.widget.DrawerLayout: android.view.View findVisibleDrawer()>();

        if $r1 == null goto label1;

        return 1;

     label1:
        return 0;
    }

    private static boolean includeChildForAccessibilitiy(android.view.View)
    {
        android.view.View $r0;
        int $i0;

        $r0 := @parameter0: android.view.View;

        $i0 = staticinvoke <android.support.v4.view.ViewCompat: int getImportantForAccessibility(android.view.View)>($r0);

        if $i0 == 4 goto label1;

        $i0 = staticinvoke <android.support.v4.view.ViewCompat: int getImportantForAccessibility(android.view.View)>($r0);

        if $i0 == 2 goto label1;

        return 1;

     label1:
        return 0;
    }

    public void addView(android.view.View, int, android.view.ViewGroup$LayoutParams)
    {
        android.support.v4.widget.DrawerLayout $r0;
        android.view.View $r1;
        int $i0, $i1;
        android.view.ViewGroup$LayoutParams $r2;
        android.support.v4.widget.DrawerLayout$ChildAccessibilityDelegate $r3;

        $r0 := @this: android.support.v4.widget.DrawerLayout;

        $r1 := @parameter0: android.view.View;

        $i0 := @parameter1: int;

        $r2 := @parameter2: android.view.ViewGroup$LayoutParams;

        if $i0 > 0 goto label1;

        if $i0 >= 0 goto label3;

        $i1 = virtualinvoke $r0.<android.support.v4.widget.DrawerLayout: int getChildCount()>();

        if $i1 <= 0 goto label3;

     label1:
        staticinvoke <android.support.v4.view.ViewCompat: void setImportantForAccessibility(android.view.View,int)>($r1, 4);

        $r3 = $r0.<android.support.v4.widget.DrawerLayout: android.support.v4.widget.DrawerLayout$ChildAccessibilityDelegate mChildAccessibilityDelegate>;

        staticinvoke <android.support.v4.view.ViewCompat: void setAccessibilityDelegate(android.view.View,android.support.v4.view.AccessibilityDelegateCompat)>($r1, $r3);

     label2:
        specialinvoke $r0.<android.view.ViewGroup: void addView(android.view.View,int,android.view.ViewGroup$LayoutParams)>($r1, $i0, $r2);

        return;

     label3:
        staticinvoke <android.support.v4.view.ViewCompat: void setImportantForAccessibility(android.view.View,int)>($r1, 1);

        goto label2;
    }

    void cancelChildViewTouch()
    {
        android.support.v4.widget.DrawerLayout $r0;
        boolean $z0;
        long $l0;
        android.view.MotionEvent $r1;
        int $i1, $i2;
        android.view.View $r2;

        $r0 := @this: android.support.v4.widget.DrawerLayout;

        $z0 = $r0.<android.support.v4.widget.DrawerLayout: boolean mChildrenCanceledTouch>;

        if $z0 != 0 goto label3;

        $l0 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

        $r1 = staticinvoke <android.view.MotionEvent: android.view.MotionEvent obtain(long,long,int,float,float,int)>($l0, $l0, 3, 0.0F, 0.0F, 0);

        $i1 = virtualinvoke $r0.<android.support.v4.widget.DrawerLayout: int getChildCount()>();

        $i2 = 0;

     label1:
        if $i2 >= $i1 goto label2;

        $r2 = virtualinvoke $r0.<android.support.v4.widget.DrawerLayout: android.view.View getChildAt(int)>($i2);

        virtualinvoke $r2.<android.view.View: boolean dispatchTouchEvent(android.view.MotionEvent)>($r1);

        $i2 = $i2 + 1;

        goto label1;

     label2:
        virtualinvoke $r1.<android.view.MotionEvent: void recycle()>();

        $r0.<android.support.v4.widget.DrawerLayout: boolean mChildrenCanceledTouch> = 1;

     label3:
        return;
    }

    boolean checkDrawerViewAbsoluteGravity(android.view.View, int)
    {
        android.support.v4.widget.DrawerLayout $r0;
        android.view.View $r1;
        int $i0, $i1;

        $r0 := @this: android.support.v4.widget.DrawerLayout;

        $r1 := @parameter0: android.view.View;

        $i0 := @parameter1: int;

        $i1 = virtualinvoke $r0.<android.support.v4.widget.DrawerLayout: int getDrawerViewAbsoluteGravity(android.view.View)>($r1);

        $i1 = $i1 & $i0;

        if $i1 != $i0 goto label1;

        return 1;

     label1:
        return 0;
    }

    protected boolean checkLayoutParams(android.view.ViewGroup$LayoutParams)
    {
        android.support.v4.widget.DrawerLayout $r0;
        android.view.ViewGroup$LayoutParams $r1;
        boolean $z0;

        $r0 := @this: android.support.v4.widget.DrawerLayout;

        $r1 := @parameter0: android.view.ViewGroup$LayoutParams;

        $z0 = $r1 instanceof android.support.v4.widget.DrawerLayout$LayoutParams;

        if $z0 == 0 goto label1;

        $z0 = specialinvoke $r0.<android.view.ViewGroup: boolean checkLayoutParams(android.view.ViewGroup$LayoutParams)>($r1);

        if $z0 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public void closeDrawer(int)
    {
        android.support.v4.widget.DrawerLayout $r0;
        int $i0;
        java.lang.IllegalArgumentException $r1;
        android.view.View $r2;
        java.lang.StringBuilder $r3;
        java.lang.String $r4;

        $r0 := @this: android.support.v4.widget.DrawerLayout;

        $i0 := @parameter0: int;

        $r2 = virtualinvoke $r0.<android.support.v4.widget.DrawerLayout: android.view.View findDrawerWithGravity(int)>($i0);

        if $r2 != null goto label1;

        $r1 = new java.lang.IllegalArgumentException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("No drawer view found with gravity ");

        $r4 = staticinvoke <android.support.v4.widget.DrawerLayout: java.lang.String gravityToString(int)>($i0);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r4);

        throw $r1;

     label1:
        virtualinvoke $r0.<android.support.v4.widget.DrawerLayout: void closeDrawer(android.view.View)>($r2);

        return;
    }

    public void closeDrawer(android.view.View)
    {
        android.support.v4.widget.DrawerLayout $r0;
        android.view.View $r1;
        boolean $z0;
        java.lang.IllegalArgumentException $r2;
        java.lang.StringBuilder $r3;
        java.lang.String $r4;
        android.view.ViewGroup$LayoutParams $r5;
        android.support.v4.widget.DrawerLayout$LayoutParams $r6;
        android.support.v4.widget.ViewDragHelper $r7;
        int $i0, $i1;

        $r0 := @this: android.support.v4.widget.DrawerLayout;

        $r1 := @parameter0: android.view.View;

        $z0 = virtualinvoke $r0.<android.support.v4.widget.DrawerLayout: boolean isDrawerView(android.view.View)>($r1);

        if $z0 != 0 goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("View ");

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r1);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is not a sliding drawer");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r4);

        throw $r2;

     label1:
        $z0 = $r0.<android.support.v4.widget.DrawerLayout: boolean mFirstLayout>;

        if $z0 == 0 goto label3;

        $r5 = virtualinvoke $r1.<android.view.View: android.view.ViewGroup$LayoutParams getLayoutParams()>();

        $r6 = (android.support.v4.widget.DrawerLayout$LayoutParams) $r5;

        $r6.<android.support.v4.widget.DrawerLayout$LayoutParams: float onScreen> = 0.0F;

        $r6.<android.support.v4.widget.DrawerLayout$LayoutParams: boolean knownOpen> = 0;

     label2:
        virtualinvoke $r0.<android.support.v4.widget.DrawerLayout: void invalidate()>();

        return;

     label3:
        $z0 = virtualinvoke $r0.<android.support.v4.widget.DrawerLayout: boolean checkDrawerViewAbsoluteGravity(android.view.View,int)>($r1, 3);

        if $z0 == 0 goto label4;

        $r7 = $r0.<android.support.v4.widget.DrawerLayout: android.support.v4.widget.ViewDragHelper mLeftDragger>;

        $i0 = virtualinvoke $r1.<android.view.View: int getWidth()>();

        $i0 = neg $i0;

        $i1 = virtualinvoke $r1.<android.view.View: int getTop()>();

        virtualinvoke $r7.<android.support.v4.widget.ViewDragHelper: boolean smoothSlideViewTo(android.view.View,int,int)>($r1, $i0, $i1);

        goto label2;

     label4:
        $r7 = $r0.<android.support.v4.widget.DrawerLayout: android.support.v4.widget.ViewDragHelper mRightDragger>;

        $i0 = virtualinvoke $r0.<android.support.v4.widget.DrawerLayout: int getWidth()>();

        $i1 = virtualinvoke $r1.<android.view.View: int getTop()>();

        virtualinvoke $r7.<android.support.v4.widget.ViewDragHelper: boolean smoothSlideViewTo(android.view.View,int,int)>($r1, $i0, $i1);

        goto label2;
    }

    public void closeDrawers()
    {
        android.support.v4.widget.DrawerLayout $r0;

        $r0 := @this: android.support.v4.widget.DrawerLayout;

        virtualinvoke $r0.<android.support.v4.widget.DrawerLayout: void closeDrawers(boolean)>(0);

        return;
    }

    void closeDrawers(boolean)
    {
        android.support.v4.widget.DrawerLayout $r0;
        boolean $z0, $z1, $z2;
        int $i0, $i1, $i2, $i3;
        android.view.View $r1;
        android.view.ViewGroup$LayoutParams $r2;
        android.support.v4.widget.DrawerLayout$LayoutParams $r3;
        android.support.v4.widget.ViewDragHelper $r4;
        android.support.v4.widget.DrawerLayout$ViewDragCallback $r5;

        $r0 := @this: android.support.v4.widget.DrawerLayout;

        $z0 := @parameter0: boolean;

        $z1 = 0;

        $i0 = virtualinvoke $r0.<android.support.v4.widget.DrawerLayout: int getChildCount()>();

        $i1 = 0;

     label1:
        if $i1 >= $i0 goto label6;

        $r1 = virtualinvoke $r0.<android.support.v4.widget.DrawerLayout: android.view.View getChildAt(int)>($i1);

        $r2 = virtualinvoke $r1.<android.view.View: android.view.ViewGroup$LayoutParams getLayoutParams()>();

        $r3 = (android.support.v4.widget.DrawerLayout$LayoutParams) $r2;

        $z2 = virtualinvoke $r0.<android.support.v4.widget.DrawerLayout: boolean isDrawerView(android.view.View)>($r1);

        if $z2 == 0 goto label2;

        if $z0 == 0 goto label3;

        $z2 = $r3.<android.support.v4.widget.DrawerLayout$LayoutParams: boolean isPeeking>;

        if $z2 != 0 goto label3;

     label2:
        $i1 = $i1 + 1;

        goto label1;

     label3:
        $i2 = virtualinvoke $r1.<android.view.View: int getWidth()>();

        $z2 = virtualinvoke $r0.<android.support.v4.widget.DrawerLayout: boolean checkDrawerViewAbsoluteGravity(android.view.View,int)>($r1, 3);

        if $z2 == 0 goto label5;

        $r4 = $r0.<android.support.v4.widget.DrawerLayout: android.support.v4.widget.ViewDragHelper mLeftDragger>;

        $i2 = neg $i2;

        $i3 = virtualinvoke $r1.<android.view.View: int getTop()>();

        $z2 = virtualinvoke $r4.<android.support.v4.widget.ViewDragHelper: boolean smoothSlideViewTo(android.view.View,int,int)>($r1, $i2, $i3);

        $z1 = $z1 | $z2;

     label4:
        $r3.<android.support.v4.widget.DrawerLayout$LayoutParams: boolean isPeeking> = 0;

        goto label2;

     label5:
        $r4 = $r0.<android.support.v4.widget.DrawerLayout: android.support.v4.widget.ViewDragHelper mRightDragger>;

        $i2 = virtualinvoke $r0.<android.support.v4.widget.DrawerLayout: int getWidth()>();

        $i3 = virtualinvoke $r1.<android.view.View: int getTop()>();

        $z2 = virtualinvoke $r4.<android.support.v4.widget.ViewDragHelper: boolean smoothSlideViewTo(android.view.View,int,int)>($r1, $i2, $i3);

        $z1 = $z1 | $z2;

        goto label4;

     label6:
        $r5 = $r0.<android.support.v4.widget.DrawerLayout: android.support.v4.widget.DrawerLayout$ViewDragCallback mLeftCallback>;

        virtualinvoke $r5.<android.support.v4.widget.DrawerLayout$ViewDragCallback: void removeCallbacks()>();

        $r5 = $r0.<android.support.v4.widget.DrawerLayout: android.support.v4.widget.DrawerLayout$ViewDragCallback mRightCallback>;

        virtualinvoke $r5.<android.support.v4.widget.DrawerLayout$ViewDragCallback: void removeCallbacks()>();

        if $z1 == 0 goto label7;

        virtualinvoke $r0.<android.support.v4.widget.DrawerLayout: void invalidate()>();

     label7:
        return;
    }

    public void computeScroll()
    {
        android.support.v4.widget.DrawerLayout $r0;
        float $f0, $f1;
        int $i0, $i1;
        android.view.View $r1;
        android.view.ViewGroup$LayoutParams $r2;
        android.support.v4.widget.DrawerLayout$LayoutParams $r3;
        android.support.v4.widget.ViewDragHelper $r4;
        boolean $z0, $z1;

        $r0 := @this: android.support.v4.widget.DrawerLayout;

        $i0 = virtualinvoke $r0.<android.support.v4.widget.DrawerLayout: int getChildCount()>();

        $f1 = 0.0F;

        $i1 = 0;

     label1:
        if $i1 >= $i0 goto label2;

        $r1 = virtualinvoke $r0.<android.support.v4.widget.DrawerLayout: android.view.View getChildAt(int)>($i1);

        $r2 = virtualinvoke $r1.<android.view.View: android.view.ViewGroup$LayoutParams getLayoutParams()>();

        $r3 = (android.support.v4.widget.DrawerLayout$LayoutParams) $r2;

        $f0 = $r3.<android.support.v4.widget.DrawerLayout$LayoutParams: float onScreen>;

        $f1 = staticinvoke <java.lang.Math: float max(float,float)>($f1, $f0);

        $i1 = $i1 + 1;

        goto label1;

     label2:
        $r0.<android.support.v4.widget.DrawerLayout: float mScrimOpacity> = $f1;

        $r4 = $r0.<android.support.v4.widget.DrawerLayout: android.support.v4.widget.ViewDragHelper mLeftDragger>;

        $z0 = virtualinvoke $r4.<android.support.v4.widget.ViewDragHelper: boolean continueSettling(boolean)>(1);

        $r4 = $r0.<android.support.v4.widget.DrawerLayout: android.support.v4.widget.ViewDragHelper mRightDragger>;

        $z1 = virtualinvoke $r4.<android.support.v4.widget.ViewDragHelper: boolean continueSettling(boolean)>(1);

        $z0 = $z0 | $z1;

        if $z0 == 0 goto label3;

        staticinvoke <android.support.v4.view.ViewCompat: void postInvalidateOnAnimation(android.view.View)>($r0);

     label3:
        return;
    }

    void dispatchOnDrawerClosed(android.view.View)
    {
        android.support.v4.widget.DrawerLayout $r0;
        android.view.View $r1, $r5;
        android.view.ViewGroup$LayoutParams $r2;
        android.support.v4.widget.DrawerLayout$LayoutParams $r3;
        boolean $z0;
        android.support.v4.widget.DrawerLayout$DrawerListener $r4;

        $r0 := @this: android.support.v4.widget.DrawerLayout;

        $r1 := @parameter0: android.view.View;

        $r2 = virtualinvoke $r1.<android.view.View: android.view.ViewGroup$LayoutParams getLayoutParams()>();

        $r3 = (android.support.v4.widget.DrawerLayout$LayoutParams) $r2;

        $z0 = $r3.<android.support.v4.widget.DrawerLayout$LayoutParams: boolean knownOpen>;

        if $z0 == 0 goto label3;

        $r3.<android.support.v4.widget.DrawerLayout$LayoutParams: boolean knownOpen> = 0;

        $r4 = $r0.<android.support.v4.widget.DrawerLayout: android.support.v4.widget.DrawerLayout$DrawerListener mListener>;

        if $r4 == null goto label1;

        $r4 = $r0.<android.support.v4.widget.DrawerLayout: android.support.v4.widget.DrawerLayout$DrawerListener mListener>;

        interfaceinvoke $r4.<android.support.v4.widget.DrawerLayout$DrawerListener: void onDrawerClosed(android.view.View)>($r1);

     label1:
        $r5 = virtualinvoke $r0.<android.support.v4.widget.DrawerLayout: android.view.View getChildAt(int)>(0);

        if $r5 == null goto label2;

        staticinvoke <android.support.v4.view.ViewCompat: void setImportantForAccessibility(android.view.View,int)>($r5, 1);

     label2:
        staticinvoke <android.support.v4.view.ViewCompat: void setImportantForAccessibility(android.view.View,int)>($r1, 4);

        $z0 = virtualinvoke $r0.<android.support.v4.widget.DrawerLayout: boolean hasWindowFocus()>();

        if $z0 == 0 goto label3;

        $r1 = virtualinvoke $r0.<android.support.v4.widget.DrawerLayout: android.view.View getRootView()>();

        if $r1 == null goto label3;

        virtualinvoke $r1.<android.view.View: void sendAccessibilityEvent(int)>(32);

     label3:
        return;
    }

    void dispatchOnDrawerOpened(android.view.View)
    {
        android.support.v4.widget.DrawerLayout $r0;
        android.view.View $r1, $r5;
        android.view.ViewGroup$LayoutParams $r2;
        android.support.v4.widget.DrawerLayout$LayoutParams $r3;
        boolean $z0;
        android.support.v4.widget.DrawerLayout$DrawerListener $r4;

        $r0 := @this: android.support.v4.widget.DrawerLayout;

        $r1 := @parameter0: android.view.View;

        $r2 = virtualinvoke $r1.<android.view.View: android.view.ViewGroup$LayoutParams getLayoutParams()>();

        $r3 = (android.support.v4.widget.DrawerLayout$LayoutParams) $r2;

        $z0 = $r3.<android.support.v4.widget.DrawerLayout$LayoutParams: boolean knownOpen>;

        if $z0 != 0 goto label3;

        $r3.<android.support.v4.widget.DrawerLayout$LayoutParams: boolean knownOpen> = 1;

        $r4 = $r0.<android.support.v4.widget.DrawerLayout: android.support.v4.widget.DrawerLayout$DrawerListener mListener>;

        if $r4 == null goto label1;

        $r4 = $r0.<android.support.v4.widget.DrawerLayout: android.support.v4.widget.DrawerLayout$DrawerListener mListener>;

        interfaceinvoke $r4.<android.support.v4.widget.DrawerLayout$DrawerListener: void onDrawerOpened(android.view.View)>($r1);

     label1:
        $r5 = virtualinvoke $r0.<android.support.v4.widget.DrawerLayout: android.view.View getChildAt(int)>(0);

        if $r5 == null goto label2;

        staticinvoke <android.support.v4.view.ViewCompat: void setImportantForAccessibility(android.view.View,int)>($r5, 4);

     label2:
        staticinvoke <android.support.v4.view.ViewCompat: void setImportantForAccessibility(android.view.View,int)>($r1, 1);

        virtualinvoke $r0.<android.support.v4.widget.DrawerLayout: void sendAccessibilityEvent(int)>(32);

        virtualinvoke $r1.<android.view.View: boolean requestFocus()>();

     label3:
        return;
    }

    void dispatchOnDrawerSlide(android.view.View, float)
    {
        android.support.v4.widget.DrawerLayout $r0;
        android.view.View $r1;
        float $f0;
        android.support.v4.widget.DrawerLayout$DrawerListener $r2;

        $r0 := @this: android.support.v4.widget.DrawerLayout;

        $r1 := @parameter0: android.view.View;

        $f0 := @parameter1: float;

        $r2 = $r0.<android.support.v4.widget.DrawerLayout: android.support.v4.widget.DrawerLayout$DrawerListener mListener>;

        if $r2 == null goto label1;

        $r2 = $r0.<android.support.v4.widget.DrawerLayout: android.support.v4.widget.DrawerLayout$DrawerListener mListener>;

        interfaceinvoke $r2.<android.support.v4.widget.DrawerLayout$DrawerListener: void onDrawerSlide(android.view.View,float)>($r1, $f0);

     label1:
        return;
    }

    protected boolean drawChild(android.graphics.Canvas, android.view.View, long)
    {
        android.support.v4.widget.DrawerLayout $r0;
        android.graphics.Canvas $r1;
        android.view.View $r2, $r4;
        long $l0;
        float $f0, $f1, $f2;
        android.graphics.Paint $r3;
        int $i1, $i2, $i3, $i4, $i5, $i6, $i7;
        boolean $z0, $z1;
        byte $b8;
        android.graphics.drawable.Drawable $r5;
        android.support.v4.widget.ViewDragHelper $r6;

        $r0 := @this: android.support.v4.widget.DrawerLayout;

        $r1 := @parameter0: android.graphics.Canvas;

        $r2 := @parameter1: android.view.View;

        $l0 := @parameter2: long;

        $i1 = virtualinvoke $r0.<android.support.v4.widget.DrawerLayout: int getHeight()>();

        $z0 = virtualinvoke $r0.<android.support.v4.widget.DrawerLayout: boolean isContentView(android.view.View)>($r2);

        $i2 = 0;

        $i3 = virtualinvoke $r0.<android.support.v4.widget.DrawerLayout: int getWidth()>();

        $i4 = virtualinvoke $r1.<android.graphics.Canvas: int save()>();

        if $z0 == 0 goto label6;

        $i5 = virtualinvoke $r0.<android.support.v4.widget.DrawerLayout: int getChildCount()>();

        $i6 = 0;

     label1:
        if $i6 >= $i5 goto label5;

        $r4 = virtualinvoke $r0.<android.support.v4.widget.DrawerLayout: android.view.View getChildAt(int)>($i6);

        if $r4 == $r2 goto label2;

        $i7 = virtualinvoke $r4.<android.view.View: int getVisibility()>();

        if $i7 != 0 goto label2;

        $z1 = staticinvoke <android.support.v4.widget.DrawerLayout: boolean hasOpaqueBackground(android.view.View)>($r4);

        if $z1 == 0 goto label2;

        $z1 = virtualinvoke $r0.<android.support.v4.widget.DrawerLayout: boolean isDrawerView(android.view.View)>($r4);

        if $z1 == 0 goto label2;

        $i7 = virtualinvoke $r4.<android.view.View: int getHeight()>();

        if $i7 >= $i1 goto label3;

     label2:
        $i6 = $i6 + 1;

        goto label1;

     label3:
        $z1 = virtualinvoke $r0.<android.support.v4.widget.DrawerLayout: boolean checkDrawerViewAbsoluteGravity(android.view.View,int)>($r4, 3);

        if $z1 == 0 goto label4;

        $i7 = virtualinvoke $r4.<android.view.View: int getRight()>();

        if $i7 <= $i2 goto label2;

        $i2 = $i7;

        goto label2;

     label4:
        $i7 = virtualinvoke $r4.<android.view.View: int getLeft()>();

        if $i7 >= $i3 goto label2;

        $i3 = $i7;

        goto label2;

     label5:
        $i1 = virtualinvoke $r0.<android.support.v4.widget.DrawerLayout: int getHeight()>();

        virtualinvoke $r1.<android.graphics.Canvas: boolean clipRect(int,int,int,int)>($i2, 0, $i3, $i1);

     label6:
        $z1 = specialinvoke $r0.<android.view.ViewGroup: boolean drawChild(android.graphics.Canvas,android.view.View,long)>($r1, $r2, $l0);

        virtualinvoke $r1.<android.graphics.Canvas: void restoreToCount(int)>($i4);

        $f0 = $r0.<android.support.v4.widget.DrawerLayout: float mScrimOpacity>;

        $b8 = $f0 cmpl 0.0F;

        if $b8 <= 0 goto label7;

        if $z0 == 0 goto label7;

        $i1 = $r0.<android.support.v4.widget.DrawerLayout: int mScrimColor>;

        $i1 = $i1 & -16777216;

        $i1 = $i1 >>> 24;

        $f0 = (float) $i1;

        $f1 = $r0.<android.support.v4.widget.DrawerLayout: float mScrimOpacity>;

        $f0 = $f0 * $f1;

        $i1 = (int) $f0;

        $i1 = $i1 << 24;

        $i4 = $r0.<android.support.v4.widget.DrawerLayout: int mScrimColor>;

        $i4 = $i4 & 16777215;

        $i1 = $i1 | $i4;

        $r3 = $r0.<android.support.v4.widget.DrawerLayout: android.graphics.Paint mScrimPaint>;

        virtualinvoke $r3.<android.graphics.Paint: void setColor(int)>($i1);

        $f1 = (float) $i2;

        $f2 = (float) $i3;

        $i2 = virtualinvoke $r0.<android.support.v4.widget.DrawerLayout: int getHeight()>();

        $f0 = (float) $i2;

        $r3 = $r0.<android.support.v4.widget.DrawerLayout: android.graphics.Paint mScrimPaint>;

        virtualinvoke $r1.<android.graphics.Canvas: void drawRect(float,float,float,float,android.graphics.Paint)>($f1, 0.0F, $f2, $f0, $r3);

        return $z1;

     label7:
        $r5 = $r0.<android.support.v4.widget.DrawerLayout: android.graphics.drawable.Drawable mShadowLeft>;

        if $r5 == null goto label8;

        $z0 = virtualinvoke $r0.<android.support.v4.widget.DrawerLayout: boolean checkDrawerViewAbsoluteGravity(android.view.View,int)>($r2, 3);

        if $z0 == 0 goto label8;

        $r5 = $r0.<android.support.v4.widget.DrawerLayout: android.graphics.drawable.Drawable mShadowLeft>;

        $i1 = virtualinvoke $r5.<android.graphics.drawable.Drawable: int getIntrinsicWidth()>();

        $i2 = virtualinvoke $r2.<android.view.View: int getRight()>();

        $r6 = $r0.<android.support.v4.widget.DrawerLayout: android.support.v4.widget.ViewDragHelper mLeftDragger>;

        $i3 = virtualinvoke $r6.<android.support.v4.widget.ViewDragHelper: int getEdgeSize()>();

        $f0 = (float) $i2;

        $f1 = (float) $i3;

        $f0 = $f0 / $f1;

        $f0 = staticinvoke <java.lang.Math: float min(float,float)>($f0, 1.0F);

        $f0 = staticinvoke <java.lang.Math: float max(float,float)>(0.0F, $f0);

        $r5 = $r0.<android.support.v4.widget.DrawerLayout: android.graphics.drawable.Drawable mShadowLeft>;

        $i3 = virtualinvoke $r2.<android.view.View: int getTop()>();

        $i1 = $i2 + $i1;

        $i4 = virtualinvoke $r2.<android.view.View: int getBottom()>();

        virtualinvoke $r5.<android.graphics.drawable.Drawable: void setBounds(int,int,int,int)>($i2, $i3, $i1, $i4);

        $r5 = $r0.<android.support.v4.widget.DrawerLayout: android.graphics.drawable.Drawable mShadowLeft>;

        $f0 = 255.0F * $f0;

        $i2 = (int) $f0;

        virtualinvoke $r5.<android.graphics.drawable.Drawable: void setAlpha(int)>($i2);

        $r5 = $r0.<android.support.v4.widget.DrawerLayout: android.graphics.drawable.Drawable mShadowLeft>;

        virtualinvoke $r5.<android.graphics.drawable.Drawable: void draw(android.graphics.Canvas)>($r1);

        return $z1;

     label8:
        $r5 = $r0.<android.support.v4.widget.DrawerLayout: android.graphics.drawable.Drawable mShadowRight>;

        if $r5 == null goto label9;

        $z0 = virtualinvoke $r0.<android.support.v4.widget.DrawerLayout: boolean checkDrawerViewAbsoluteGravity(android.view.View,int)>($r2, 5);

        if $z0 == 0 goto label9;

        $r5 = $r0.<android.support.v4.widget.DrawerLayout: android.graphics.drawable.Drawable mShadowRight>;

        $i3 = virtualinvoke $r5.<android.graphics.drawable.Drawable: int getIntrinsicWidth()>();

        $i2 = virtualinvoke $r2.<android.view.View: int getLeft()>();

        $i1 = virtualinvoke $r0.<android.support.v4.widget.DrawerLayout: int getWidth()>();

        $i1 = $i1 - $i2;

        $r6 = $r0.<android.support.v4.widget.DrawerLayout: android.support.v4.widget.ViewDragHelper mRightDragger>;

        $i4 = virtualinvoke $r6.<android.support.v4.widget.ViewDragHelper: int getEdgeSize()>();

        $f0 = (float) $i1;

        $f1 = (float) $i4;

        $f0 = $f0 / $f1;

        $f0 = staticinvoke <java.lang.Math: float min(float,float)>($f0, 1.0F);

        $f0 = staticinvoke <java.lang.Math: float max(float,float)>(0.0F, $f0);

        $r5 = $r0.<android.support.v4.widget.DrawerLayout: android.graphics.drawable.Drawable mShadowRight>;

        $i3 = $i2 - $i3;

        $i1 = virtualinvoke $r2.<android.view.View: int getTop()>();

        $i4 = virtualinvoke $r2.<android.view.View: int getBottom()>();

        virtualinvoke $r5.<android.graphics.drawable.Drawable: void setBounds(int,int,int,int)>($i3, $i1, $i2, $i4);

        $r5 = $r0.<android.support.v4.widget.DrawerLayout: android.graphics.drawable.Drawable mShadowRight>;

        $f0 = 255.0F * $f0;

        $i2 = (int) $f0;

        virtualinvoke $r5.<android.graphics.drawable.Drawable: void setAlpha(int)>($i2);

        $r5 = $r0.<android.support.v4.widget.DrawerLayout: android.graphics.drawable.Drawable mShadowRight>;

        virtualinvoke $r5.<android.graphics.drawable.Drawable: void draw(android.graphics.Canvas)>($r1);

     label9:
        return $z1;
    }

    android.view.View findDrawerWithGravity(int)
    {
        android.support.v4.widget.DrawerLayout $r0;
        int $i0, $i1, $i2, $i3;
        android.view.View $r1;

        $r0 := @this: android.support.v4.widget.DrawerLayout;

        $i0 := @parameter0: int;

        $i1 = staticinvoke <android.support.v4.view.ViewCompat: int getLayoutDirection(android.view.View)>($r0);

        $i0 = staticinvoke <android.support.v4.view.GravityCompat: int getAbsoluteGravity(int,int)>($i0, $i1);

        $i0 = $i0 & 7;

        $i1 = virtualinvoke $r0.<android.support.v4.widget.DrawerLayout: int getChildCount()>();

        $i2 = 0;

     label1:
        if $i2 >= $i1 goto label3;

        $r1 = virtualinvoke $r0.<android.support.v4.widget.DrawerLayout: android.view.View getChildAt(int)>($i2);

        $i3 = virtualinvoke $r0.<android.support.v4.widget.DrawerLayout: int getDrawerViewAbsoluteGravity(android.view.View)>($r1);

        $i3 = $i3 & 7;

        if $i3 != $i0 goto label2;

        return $r1;

     label2:
        $i2 = $i2 + 1;

        goto label1;

     label3:
        return null;
    }

    android.view.View findOpenDrawer()
    {
        android.support.v4.widget.DrawerLayout $r0;
        int $i0, $i1;
        android.view.View $r1;
        android.view.ViewGroup$LayoutParams $r2;
        android.support.v4.widget.DrawerLayout$LayoutParams $r3;
        boolean $z0;

        $r0 := @this: android.support.v4.widget.DrawerLayout;

        $i0 = virtualinvoke $r0.<android.support.v4.widget.DrawerLayout: int getChildCount()>();

        $i1 = 0;

     label1:
        if $i1 >= $i0 goto label3;

        $r1 = virtualinvoke $r0.<android.support.v4.widget.DrawerLayout: android.view.View getChildAt(int)>($i1);

        $r2 = virtualinvoke $r1.<android.view.View: android.view.ViewGroup$LayoutParams getLayoutParams()>();

        $r3 = (android.support.v4.widget.DrawerLayout$LayoutParams) $r2;

        $z0 = $r3.<android.support.v4.widget.DrawerLayout$LayoutParams: boolean knownOpen>;

        if $z0 == 0 goto label2;

        return $r1;

     label2:
        $i1 = $i1 + 1;

        goto label1;

     label3:
        return null;
    }

    protected android.view.ViewGroup$LayoutParams generateDefaultLayoutParams()
    {
        android.support.v4.widget.DrawerLayout $r0;
        android.support.v4.widget.DrawerLayout$LayoutParams $r1;

        $r0 := @this: android.support.v4.widget.DrawerLayout;

        $r1 = new android.support.v4.widget.DrawerLayout$LayoutParams;

        specialinvoke $r1.<android.support.v4.widget.DrawerLayout$LayoutParams: void <init>(int,int)>(-1, -1);

        return $r1;
    }

    public android.view.ViewGroup$LayoutParams generateLayoutParams(android.util.AttributeSet)
    {
        android.support.v4.widget.DrawerLayout $r0;
        android.util.AttributeSet $r1;
        android.support.v4.widget.DrawerLayout$LayoutParams $r2;
        android.content.Context $r3;

        $r0 := @this: android.support.v4.widget.DrawerLayout;

        $r1 := @parameter0: android.util.AttributeSet;

        $r2 = new android.support.v4.widget.DrawerLayout$LayoutParams;

        $r3 = virtualinvoke $r0.<android.support.v4.widget.DrawerLayout: android.content.Context getContext()>();

        specialinvoke $r2.<android.support.v4.widget.DrawerLayout$LayoutParams: void <init>(android.content.Context,android.util.AttributeSet)>($r3, $r1);

        return $r2;
    }

    protected android.view.ViewGroup$LayoutParams generateLayoutParams(android.view.ViewGroup$LayoutParams)
    {
        android.support.v4.widget.DrawerLayout $r0;
        android.view.ViewGroup$LayoutParams $r1;
        boolean $z0;
        android.support.v4.widget.DrawerLayout$LayoutParams $r2, $r3;
        android.view.ViewGroup$MarginLayoutParams $r4;

        $r0 := @this: android.support.v4.widget.DrawerLayout;

        $r1 := @parameter0: android.view.ViewGroup$LayoutParams;

        $z0 = $r1 instanceof android.support.v4.widget.DrawerLayout$LayoutParams;

        if $z0 == 0 goto label1;

        $r2 = new android.support.v4.widget.DrawerLayout$LayoutParams;

        $r3 = (android.support.v4.widget.DrawerLayout$LayoutParams) $r1;

        specialinvoke $r2.<android.support.v4.widget.DrawerLayout$LayoutParams: void <init>(android.support.v4.widget.DrawerLayout$LayoutParams)>($r3);

        return $r2;

     label1:
        $z0 = $r1 instanceof android.view.ViewGroup$MarginLayoutParams;

        if $z0 == 0 goto label2;

        $r2 = new android.support.v4.widget.DrawerLayout$LayoutParams;

        $r4 = (android.view.ViewGroup$MarginLayoutParams) $r1;

        specialinvoke $r2.<android.support.v4.widget.DrawerLayout$LayoutParams: void <init>(android.view.ViewGroup$MarginLayoutParams)>($r4);

        return $r2;

     label2:
        $r2 = new android.support.v4.widget.DrawerLayout$LayoutParams;

        specialinvoke $r2.<android.support.v4.widget.DrawerLayout$LayoutParams: void <init>(android.view.ViewGroup$LayoutParams)>($r1);

        return $r2;
    }

    public int getDrawerLockMode(int)
    {
        android.support.v4.widget.DrawerLayout $r0;
        int $i0, $i1;

        $r0 := @this: android.support.v4.widget.DrawerLayout;

        $i0 := @parameter0: int;

        $i1 = staticinvoke <android.support.v4.view.ViewCompat: int getLayoutDirection(android.view.View)>($r0);

        $i0 = staticinvoke <android.support.v4.view.GravityCompat: int getAbsoluteGravity(int,int)>($i0, $i1);

        if $i0 != 3 goto label1;

        $i0 = $r0.<android.support.v4.widget.DrawerLayout: int mLockModeLeft>;

        return $i0;

     label1:
        if $i0 != 5 goto label2;

        $i0 = $r0.<android.support.v4.widget.DrawerLayout: int mLockModeRight>;

        return $i0;

     label2:
        return 0;
    }

    public int getDrawerLockMode(android.view.View)
    {
        android.support.v4.widget.DrawerLayout $r0;
        android.view.View $r1;
        int $i0;

        $r0 := @this: android.support.v4.widget.DrawerLayout;

        $r1 := @parameter0: android.view.View;

        $i0 = virtualinvoke $r0.<android.support.v4.widget.DrawerLayout: int getDrawerViewAbsoluteGravity(android.view.View)>($r1);

        if $i0 != 3 goto label1;

        $i0 = $r0.<android.support.v4.widget.DrawerLayout: int mLockModeLeft>;

        return $i0;

     label1:
        if $i0 != 5 goto label2;

        $i0 = $r0.<android.support.v4.widget.DrawerLayout: int mLockModeRight>;

        return $i0;

     label2:
        return 0;
    }

    public java.lang.CharSequence getDrawerTitle(int)
    {
        android.support.v4.widget.DrawerLayout $r0;
        int $i0, $i1;
        java.lang.CharSequence r1;

        $r0 := @this: android.support.v4.widget.DrawerLayout;

        $i0 := @parameter0: int;

        $i1 = staticinvoke <android.support.v4.view.ViewCompat: int getLayoutDirection(android.view.View)>($r0);

        $i0 = staticinvoke <android.support.v4.view.GravityCompat: int getAbsoluteGravity(int,int)>($i0, $i1);

        if $i0 != 3 goto label1;

        r1 = $r0.<android.support.v4.widget.DrawerLayout: java.lang.CharSequence mTitleLeft>;

        return r1;

     label1:
        if $i0 != 5 goto label2;

        r1 = $r0.<android.support.v4.widget.DrawerLayout: java.lang.CharSequence mTitleRight>;

        return r1;

     label2:
        return null;
    }

    int getDrawerViewAbsoluteGravity(android.view.View)
    {
        android.support.v4.widget.DrawerLayout $r0;
        android.view.View $r1;
        int $i0, $i1;
        android.view.ViewGroup$LayoutParams $r2;
        android.support.v4.widget.DrawerLayout$LayoutParams $r3;

        $r0 := @this: android.support.v4.widget.DrawerLayout;

        $r1 := @parameter0: android.view.View;

        $r2 = virtualinvoke $r1.<android.view.View: android.view.ViewGroup$LayoutParams getLayoutParams()>();

        $r3 = (android.support.v4.widget.DrawerLayout$LayoutParams) $r2;

        $i0 = $r3.<android.support.v4.widget.DrawerLayout$LayoutParams: int gravity>;

        $i1 = staticinvoke <android.support.v4.view.ViewCompat: int getLayoutDirection(android.view.View)>($r0);

        $i0 = staticinvoke <android.support.v4.view.GravityCompat: int getAbsoluteGravity(int,int)>($i0, $i1);

        return $i0;
    }

    float getDrawerViewOffset(android.view.View)
    {
        android.support.v4.widget.DrawerLayout $r0;
        android.view.View $r1;
        android.view.ViewGroup$LayoutParams $r2;
        android.support.v4.widget.DrawerLayout$LayoutParams $r3;
        float f0;

        $r0 := @this: android.support.v4.widget.DrawerLayout;

        $r1 := @parameter0: android.view.View;

        $r2 = virtualinvoke $r1.<android.view.View: android.view.ViewGroup$LayoutParams getLayoutParams()>();

        $r3 = (android.support.v4.widget.DrawerLayout$LayoutParams) $r2;

        f0 = $r3.<android.support.v4.widget.DrawerLayout$LayoutParams: float onScreen>;

        return f0;
    }

    boolean isContentView(android.view.View)
    {
        android.support.v4.widget.DrawerLayout $r0;
        android.view.View $r1;
        android.view.ViewGroup$LayoutParams $r2;
        android.support.v4.widget.DrawerLayout$LayoutParams $r3;
        int $i0;

        $r0 := @this: android.support.v4.widget.DrawerLayout;

        $r1 := @parameter0: android.view.View;

        $r2 = virtualinvoke $r1.<android.view.View: android.view.ViewGroup$LayoutParams getLayoutParams()>();

        $r3 = (android.support.v4.widget.DrawerLayout$LayoutParams) $r2;

        $i0 = $r3.<android.support.v4.widget.DrawerLayout$LayoutParams: int gravity>;

        if $i0 != 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public boolean isDrawerOpen(int)
    {
        android.support.v4.widget.DrawerLayout $r0;
        int $i0;
        android.view.View $r1;
        boolean $z0;

        $r0 := @this: android.support.v4.widget.DrawerLayout;

        $i0 := @parameter0: int;

        $r1 = virtualinvoke $r0.<android.support.v4.widget.DrawerLayout: android.view.View findDrawerWithGravity(int)>($i0);

        if $r1 == null goto label1;

        $z0 = virtualinvoke $r0.<android.support.v4.widget.DrawerLayout: boolean isDrawerOpen(android.view.View)>($r1);

        return $z0;

     label1:
        return 0;
    }

    public boolean isDrawerOpen(android.view.View)
    {
        android.support.v4.widget.DrawerLayout $r0;
        android.view.View $r1;
        boolean $z0;
        java.lang.IllegalArgumentException $r2;
        java.lang.StringBuilder $r3;
        java.lang.String $r4;
        android.view.ViewGroup$LayoutParams $r5;
        android.support.v4.widget.DrawerLayout$LayoutParams $r6;

        $r0 := @this: android.support.v4.widget.DrawerLayout;

        $r1 := @parameter0: android.view.View;

        $z0 = virtualinvoke $r0.<android.support.v4.widget.DrawerLayout: boolean isDrawerView(android.view.View)>($r1);

        if $z0 != 0 goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("View ");

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r1);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is not a drawer");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r4);

        throw $r2;

     label1:
        $r5 = virtualinvoke $r1.<android.view.View: android.view.ViewGroup$LayoutParams getLayoutParams()>();

        $r6 = (android.support.v4.widget.DrawerLayout$LayoutParams) $r5;

        $z0 = $r6.<android.support.v4.widget.DrawerLayout$LayoutParams: boolean knownOpen>;

        return $z0;
    }

    boolean isDrawerView(android.view.View)
    {
        android.support.v4.widget.DrawerLayout $r0;
        android.view.View $r1;
        int $i0, $i1;
        android.view.ViewGroup$LayoutParams $r2;
        android.support.v4.widget.DrawerLayout$LayoutParams $r3;

        $r0 := @this: android.support.v4.widget.DrawerLayout;

        $r1 := @parameter0: android.view.View;

        $r2 = virtualinvoke $r1.<android.view.View: android.view.ViewGroup$LayoutParams getLayoutParams()>();

        $r3 = (android.support.v4.widget.DrawerLayout$LayoutParams) $r2;

        $i0 = $r3.<android.support.v4.widget.DrawerLayout$LayoutParams: int gravity>;

        $i1 = staticinvoke <android.support.v4.view.ViewCompat: int getLayoutDirection(android.view.View)>($r1);

        $i0 = staticinvoke <android.support.v4.view.GravityCompat: int getAbsoluteGravity(int,int)>($i0, $i1);

        $i0 = $i0 & 7;

        if $i0 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public boolean isDrawerVisible(int)
    {
        android.support.v4.widget.DrawerLayout $r0;
        int $i0;
        android.view.View $r1;
        boolean $z0;

        $r0 := @this: android.support.v4.widget.DrawerLayout;

        $i0 := @parameter0: int;

        $r1 = virtualinvoke $r0.<android.support.v4.widget.DrawerLayout: android.view.View findDrawerWithGravity(int)>($i0);

        if $r1 == null goto label1;

        $z0 = virtualinvoke $r0.<android.support.v4.widget.DrawerLayout: boolean isDrawerVisible(android.view.View)>($r1);

        return $z0;

     label1:
        return 0;
    }

    public boolean isDrawerVisible(android.view.View)
    {
        android.support.v4.widget.DrawerLayout $r0;
        android.view.View $r1;
        boolean $z0;
        java.lang.IllegalArgumentException $r2;
        java.lang.StringBuilder $r3;
        java.lang.String $r4;
        android.view.ViewGroup$LayoutParams $r5;
        android.support.v4.widget.DrawerLayout$LayoutParams $r6;
        float $f0;
        byte $b0;

        $r0 := @this: android.support.v4.widget.DrawerLayout;

        $r1 := @parameter0: android.view.View;

        $z0 = virtualinvoke $r0.<android.support.v4.widget.DrawerLayout: boolean isDrawerView(android.view.View)>($r1);

        if $z0 != 0 goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("View ");

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r1);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is not a drawer");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r4);

        throw $r2;

     label1:
        $r5 = virtualinvoke $r1.<android.view.View: android.view.ViewGroup$LayoutParams getLayoutParams()>();

        $r6 = (android.support.v4.widget.DrawerLayout$LayoutParams) $r5;

        $f0 = $r6.<android.support.v4.widget.DrawerLayout$LayoutParams: float onScreen>;

        $b0 = $f0 cmpl 0.0F;

        if $b0 <= 0 goto label2;

        return 1;

     label2:
        return 0;
    }

    void moveDrawerToOffset(android.view.View, float)
    {
        android.support.v4.widget.DrawerLayout $r0;
        android.view.View $r1;
        float $f0, $f1, $f2;
        int $i0, $i1;
        boolean $z0;

        $r0 := @this: android.support.v4.widget.DrawerLayout;

        $r1 := @parameter0: android.view.View;

        $f0 := @parameter1: float;

        $f1 = virtualinvoke $r0.<android.support.v4.widget.DrawerLayout: float getDrawerViewOffset(android.view.View)>($r1);

        $i0 = virtualinvoke $r1.<android.view.View: int getWidth()>();

        $f2 = (float) $i0;

        $f1 = $f2 * $f1;

        $i1 = (int) $f1;

        $f1 = (float) $i0;

        $f1 = $f1 * $f0;

        $i0 = (int) $f1;

        $i1 = $i0 - $i1;

        $z0 = virtualinvoke $r0.<android.support.v4.widget.DrawerLayout: boolean checkDrawerViewAbsoluteGravity(android.view.View,int)>($r1, 3);

        if $z0 == 0 goto label2;

     label1:
        virtualinvoke $r1.<android.view.View: void offsetLeftAndRight(int)>($i1);

        virtualinvoke $r0.<android.support.v4.widget.DrawerLayout: void setDrawerViewOffset(android.view.View,float)>($r1, $f0);

        return;

     label2:
        $i1 = neg $i1;

        goto label1;
    }

    protected void onAttachedToWindow()
    {
        android.support.v4.widget.DrawerLayout $r0;

        $r0 := @this: android.support.v4.widget.DrawerLayout;

        specialinvoke $r0.<android.view.ViewGroup: void onAttachedToWindow()>();

        $r0.<android.support.v4.widget.DrawerLayout: boolean mFirstLayout> = 1;

        return;
    }

    protected void onDetachedFromWindow()
    {
        android.support.v4.widget.DrawerLayout $r0;

        $r0 := @this: android.support.v4.widget.DrawerLayout;

        specialinvoke $r0.<android.view.ViewGroup: void onDetachedFromWindow()>();

        $r0.<android.support.v4.widget.DrawerLayout: boolean mFirstLayout> = 1;

        return;
    }

    public boolean onInterceptTouchEvent(android.view.MotionEvent)
    {
        android.support.v4.widget.DrawerLayout $r0;
        android.view.MotionEvent $r1;
        boolean $z0, $z1, $z2;
        int $i0, $i2;
        android.support.v4.widget.ViewDragHelper $r2;
        float $f0, $f1, $f2;
        byte $b1;
        android.view.View $r3;
        android.support.v4.widget.DrawerLayout$ViewDragCallback $r4;

        $r0 := @this: android.support.v4.widget.DrawerLayout;

        $r1 := @parameter0: android.view.MotionEvent;

        $i0 = staticinvoke <android.support.v4.view.MotionEventCompat: int getActionMasked(android.view.MotionEvent)>($r1);

        $r2 = $r0.<android.support.v4.widget.DrawerLayout: android.support.v4.widget.ViewDragHelper mLeftDragger>;

        $z0 = virtualinvoke $r2.<android.support.v4.widget.ViewDragHelper: boolean shouldInterceptTouchEvent(android.view.MotionEvent)>($r1);

        $r2 = $r0.<android.support.v4.widget.DrawerLayout: android.support.v4.widget.ViewDragHelper mRightDragger>;

        $z1 = virtualinvoke $r2.<android.support.v4.widget.ViewDragHelper: boolean shouldInterceptTouchEvent(android.view.MotionEvent)>($r1);

        $z0 = $z0 | $z1;

        $z1 = 0;

        lookupswitch($i0)
        {
            case 0: goto label3;
            case 1: goto label6;
            case 2: goto label5;
            case 3: goto label6;
            default: goto label1;
        };

     label1:
        if $z0 != 0 goto label2;

        if $z1 != 0 goto label2;

        $z0 = specialinvoke $r0.<android.support.v4.widget.DrawerLayout: boolean hasPeekingDrawer()>();

        if $z0 != 0 goto label2;

        $z0 = $r0.<android.support.v4.widget.DrawerLayout: boolean mChildrenCanceledTouch>;

        if $z0 == 0 goto label7;

     label2:
        return 1;

     label3:
        $f0 = virtualinvoke $r1.<android.view.MotionEvent: float getX()>();

        $f1 = virtualinvoke $r1.<android.view.MotionEvent: float getY()>();

        $r0.<android.support.v4.widget.DrawerLayout: float mInitialMotionX> = $f0;

        $r0.<android.support.v4.widget.DrawerLayout: float mInitialMotionY> = $f1;

        $f2 = $r0.<android.support.v4.widget.DrawerLayout: float mScrimOpacity>;

        $b1 = $f2 cmpl 0.0F;

        if $b1 <= 0 goto label4;

        $r2 = $r0.<android.support.v4.widget.DrawerLayout: android.support.v4.widget.ViewDragHelper mLeftDragger>;

        $i2 = (int) $f0;

        $i0 = (int) $f1;

        $r3 = virtualinvoke $r2.<android.support.v4.widget.ViewDragHelper: android.view.View findTopChildUnder(int,int)>($i2, $i0);

        $z2 = virtualinvoke $r0.<android.support.v4.widget.DrawerLayout: boolean isContentView(android.view.View)>($r3);

        if $z2 == 0 goto label4;

        $z1 = 1;

     label4:
        $r0.<android.support.v4.widget.DrawerLayout: boolean mDisallowInterceptRequested> = 0;

        $r0.<android.support.v4.widget.DrawerLayout: boolean mChildrenCanceledTouch> = 0;

        goto label1;

     label5:
        $r2 = $r0.<android.support.v4.widget.DrawerLayout: android.support.v4.widget.ViewDragHelper mLeftDragger>;

        $z2 = virtualinvoke $r2.<android.support.v4.widget.ViewDragHelper: boolean checkTouchSlop(int)>(3);

        if $z2 == 0 goto label1;

        $r4 = $r0.<android.support.v4.widget.DrawerLayout: android.support.v4.widget.DrawerLayout$ViewDragCallback mLeftCallback>;

        virtualinvoke $r4.<android.support.v4.widget.DrawerLayout$ViewDragCallback: void removeCallbacks()>();

        $r4 = $r0.<android.support.v4.widget.DrawerLayout: android.support.v4.widget.DrawerLayout$ViewDragCallback mRightCallback>;

        virtualinvoke $r4.<android.support.v4.widget.DrawerLayout$ViewDragCallback: void removeCallbacks()>();

        goto label1;

     label6:
        virtualinvoke $r0.<android.support.v4.widget.DrawerLayout: void closeDrawers(boolean)>(1);

        $r0.<android.support.v4.widget.DrawerLayout: boolean mDisallowInterceptRequested> = 0;

        $r0.<android.support.v4.widget.DrawerLayout: boolean mChildrenCanceledTouch> = 0;

        goto label1;

     label7:
        return 0;
    }

    public boolean onKeyDown(int, android.view.KeyEvent)
    {
        android.support.v4.widget.DrawerLayout $r0;
        int $i0;
        android.view.KeyEvent $r1;
        boolean $z0;

        $r0 := @this: android.support.v4.widget.DrawerLayout;

        $i0 := @parameter0: int;

        $r1 := @parameter1: android.view.KeyEvent;

        if $i0 != 4 goto label1;

        $z0 = specialinvoke $r0.<android.support.v4.widget.DrawerLayout: boolean hasVisibleDrawer()>();

        if $z0 == 0 goto label1;

        staticinvoke <android.support.v4.view.KeyEventCompat: void startTracking(android.view.KeyEvent)>($r1);

        return 1;

     label1:
        $z0 = specialinvoke $r0.<android.view.ViewGroup: boolean onKeyDown(int,android.view.KeyEvent)>($i0, $r1);

        return $z0;
    }

    public boolean onKeyUp(int, android.view.KeyEvent)
    {
        android.support.v4.widget.DrawerLayout $r0;
        int $i0;
        android.view.KeyEvent $r1;
        android.view.View $r2;
        boolean $z0;

        $r0 := @this: android.support.v4.widget.DrawerLayout;

        $i0 := @parameter0: int;

        $r1 := @parameter1: android.view.KeyEvent;

        if $i0 != 4 goto label3;

        $r2 = specialinvoke $r0.<android.support.v4.widget.DrawerLayout: android.view.View findVisibleDrawer()>();

        if $r2 == null goto label1;

        $i0 = virtualinvoke $r0.<android.support.v4.widget.DrawerLayout: int getDrawerLockMode(android.view.View)>($r2);

        if $i0 != 0 goto label1;

        virtualinvoke $r0.<android.support.v4.widget.DrawerLayout: void closeDrawers()>();

     label1:
        if $r2 == null goto label2;

        return 1;

     label2:
        return 0;

     label3:
        $z0 = specialinvoke $r0.<android.view.ViewGroup: boolean onKeyUp(int,android.view.KeyEvent)>($i0, $r1);

        return $z0;
    }

    protected void onLayout(boolean, int, int, int, int)
    {
        android.support.v4.widget.DrawerLayout $r0;
        boolean $z0;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i11, $i12;
        android.view.View $r1;
        android.view.ViewGroup$LayoutParams $r2;
        android.support.v4.widget.DrawerLayout$LayoutParams $r3;
        float $f0, $f1;
        byte $b10;

        $r0 := @this: android.support.v4.widget.DrawerLayout;

        $z0 := @parameter0: boolean;

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $i2 := @parameter3: int;

        $i3 := @parameter4: int;

        $r0.<android.support.v4.widget.DrawerLayout: boolean mInLayout> = 1;

        $i0 = $i2 - $i0;

        $i2 = virtualinvoke $r0.<android.support.v4.widget.DrawerLayout: int getChildCount()>();

        $i5 = 0;

     label01:
        if $i5 >= $i2 goto label18;

        $r1 = virtualinvoke $r0.<android.support.v4.widget.DrawerLayout: android.view.View getChildAt(int)>($i5);

        $i6 = virtualinvoke $r1.<android.view.View: int getVisibility()>();

        if $i6 != 8 goto label03;

     label02:
        $i5 = $i5 + 1;

        goto label01;

     label03:
        $r2 = virtualinvoke $r1.<android.view.View: android.view.ViewGroup$LayoutParams getLayoutParams()>();

        $r3 = (android.support.v4.widget.DrawerLayout$LayoutParams) $r2;

        $z0 = virtualinvoke $r0.<android.support.v4.widget.DrawerLayout: boolean isContentView(android.view.View)>($r1);

        if $z0 == 0 goto label04;

        $i6 = $r3.<android.support.v4.widget.DrawerLayout$LayoutParams: int leftMargin>;

        $i7 = $r3.<android.support.v4.widget.DrawerLayout$LayoutParams: int topMargin>;

        $i8 = $r3.<android.support.v4.widget.DrawerLayout$LayoutParams: int leftMargin>;

        $i4 = virtualinvoke $r1.<android.view.View: int getMeasuredWidth()>();

        $i8 = $i8 + $i4;

        $i4 = $r3.<android.support.v4.widget.DrawerLayout$LayoutParams: int topMargin>;

        $i9 = virtualinvoke $r1.<android.view.View: int getMeasuredHeight()>();

        $i4 = $i4 + $i9;

        virtualinvoke $r1.<android.view.View: void layout(int,int,int,int)>($i6, $i7, $i8, $i4);

        goto label02;

     label04:
        $i7 = virtualinvoke $r1.<android.view.View: int getMeasuredWidth()>();

        $i8 = virtualinvoke $r1.<android.view.View: int getMeasuredHeight()>();

        $z0 = virtualinvoke $r0.<android.support.v4.widget.DrawerLayout: boolean checkDrawerViewAbsoluteGravity(android.view.View,int)>($r1, 3);

        if $z0 == 0 goto label11;

        $i6 = neg $i7;

        $f0 = (float) $i7;

        $f1 = $r3.<android.support.v4.widget.DrawerLayout$LayoutParams: float onScreen>;

        $f0 = $f0 * $f1;

        $i4 = (int) $f0;

        $i6 = $i6 + $i4;

        $i4 = $i7 + $i6;

        $f0 = (float) $i4;

        $f1 = (float) $i7;

        $f0 = $f0 / $f1;

     label05:
        $f1 = $r3.<android.support.v4.widget.DrawerLayout$LayoutParams: float onScreen>;

        $b10 = $f0 cmpl $f1;

        if $b10 == 0 goto label12;

        $z0 = 1;

     label06:
        $i4 = $r3.<android.support.v4.widget.DrawerLayout$LayoutParams: int gravity>;

        $i4 = $i4 & 112;

        lookupswitch($i4)
        {
            case 16: goto label14;
            case 80: goto label13;
            default: goto label07;
        };

     label07:
        $i4 = $r3.<android.support.v4.widget.DrawerLayout$LayoutParams: int topMargin>;

        $i7 = $i6 + $i7;

        $i9 = $r3.<android.support.v4.widget.DrawerLayout$LayoutParams: int topMargin>;

        $i8 = $i9 + $i8;

        virtualinvoke $r1.<android.view.View: void layout(int,int,int,int)>($i6, $i4, $i7, $i8);

     label08:
        if $z0 == 0 goto label09;

        virtualinvoke $r0.<android.support.v4.widget.DrawerLayout: void setDrawerViewOffset(android.view.View,float)>($r1, $f0);

     label09:
        $f0 = $r3.<android.support.v4.widget.DrawerLayout$LayoutParams: float onScreen>;

        $b10 = $f0 cmpl 0.0F;

        if $b10 <= 0 goto label17;

        $b10 = 0;

     label10:
        $i6 = virtualinvoke $r1.<android.view.View: int getVisibility()>();

        if $i6 == $b10 goto label02;

        virtualinvoke $r1.<android.view.View: void setVisibility(int)>($b10);

        goto label02;

     label11:
        $f0 = (float) $i7;

        $f1 = $r3.<android.support.v4.widget.DrawerLayout$LayoutParams: float onScreen>;

        $f0 = $f0 * $f1;

        $i6 = (int) $f0;

        $i6 = $i0 - $i6;

        $i4 = $i0 - $i6;

        $f0 = (float) $i4;

        $f1 = (float) $i7;

        $f0 = $f0 / $f1;

        goto label05;

     label12:
        $z0 = 0;

        goto label06;

     label13:
        $i8 = $i3 - $i1;

        $i4 = $r3.<android.support.v4.widget.DrawerLayout$LayoutParams: int bottomMargin>;

        $i4 = $i8 - $i4;

        $i9 = virtualinvoke $r1.<android.view.View: int getMeasuredHeight()>();

        $i4 = $i4 - $i9;

        $i7 = $i6 + $i7;

        $i9 = $r3.<android.support.v4.widget.DrawerLayout$LayoutParams: int bottomMargin>;

        $i8 = $i8 - $i9;

        virtualinvoke $r1.<android.view.View: void layout(int,int,int,int)>($i6, $i4, $i7, $i8);

        goto label08;

     label14:
        $i4 = $i3 - $i1;

        $i9 = $i4 - $i8;

        $i9 = $i9 / 2;

        $i11 = $r3.<android.support.v4.widget.DrawerLayout$LayoutParams: int topMargin>;

        if $i9 >= $i11 goto label16;

        $i9 = $r3.<android.support.v4.widget.DrawerLayout$LayoutParams: int topMargin>;

     label15:
        $i7 = $i6 + $i7;

        $i8 = $i9 + $i8;

        virtualinvoke $r1.<android.view.View: void layout(int,int,int,int)>($i6, $i9, $i7, $i8);

        goto label08;

     label16:
        $i11 = $i9 + $i8;

        $i12 = $r3.<android.support.v4.widget.DrawerLayout$LayoutParams: int bottomMargin>;

        $i12 = $i4 - $i12;

        if $i11 <= $i12 goto label15;

        $i9 = $r3.<android.support.v4.widget.DrawerLayout$LayoutParams: int bottomMargin>;

        $i4 = $i4 - $i9;

        $i9 = $i4 - $i8;

        goto label15;

     label17:
        $b10 = 4;

        goto label10;

     label18:
        $r0.<android.support.v4.widget.DrawerLayout: boolean mInLayout> = 0;

        $r0.<android.support.v4.widget.DrawerLayout: boolean mFirstLayout> = 0;

        return;
    }

    protected void onMeasure(int, int)
    {
        android.support.v4.widget.DrawerLayout $r0;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8;
        boolean $z0;
        android.view.View $r1;
        java.lang.IllegalArgumentException $r2;
        android.view.ViewGroup$LayoutParams $r3;
        android.support.v4.widget.DrawerLayout$LayoutParams $r4;
        java.lang.IllegalStateException $r5;
        java.lang.StringBuilder $r6;
        java.lang.String $r7;

        $r0 := @this: android.support.v4.widget.DrawerLayout;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $i3 = staticinvoke <android.view.View$MeasureSpec: int getMode(int)>($i0);

        $i4 = staticinvoke <android.view.View$MeasureSpec: int getMode(int)>($i1);

        $i5 = staticinvoke <android.view.View$MeasureSpec: int getSize(int)>($i0);

        $i6 = staticinvoke <android.view.View$MeasureSpec: int getSize(int)>($i1);

        if $i3 != 1073741824 goto label01;

        if $i4 == 1073741824 goto label03;

     label01:
        $z0 = virtualinvoke $r0.<android.support.v4.widget.DrawerLayout: boolean isInEditMode()>();

        if $z0 == 0 goto label08;

        if $i3 != -2147483648 goto label06;

     label02:
        if $i4 != -2147483648 goto label07;

     label03:
        virtualinvoke $r0.<android.support.v4.widget.DrawerLayout: void setMeasuredDimension(int,int)>($i5, $i6);

        $i3 = virtualinvoke $r0.<android.support.v4.widget.DrawerLayout: int getChildCount()>();

        $i4 = 0;

     label04:
        if $i4 >= $i3 goto label13;

        $r1 = virtualinvoke $r0.<android.support.v4.widget.DrawerLayout: android.view.View getChildAt(int)>($i4);

        $i2 = virtualinvoke $r1.<android.view.View: int getVisibility()>();

        if $i2 != 8 goto label09;

     label05:
        $i4 = $i4 + 1;

        goto label04;

     label06:
        if $i3 != 0 goto label02;

        $i5 = 300;

        goto label02;

     label07:
        if $i4 != 0 goto label03;

        $i6 = 300;

        goto label03;

     label08:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("DrawerLayout must be measured with MeasureSpec.EXACTLY.");

        throw $r2;

     label09:
        $r3 = virtualinvoke $r1.<android.view.View: android.view.ViewGroup$LayoutParams getLayoutParams()>();

        $r4 = (android.support.v4.widget.DrawerLayout$LayoutParams) $r3;

        $z0 = virtualinvoke $r0.<android.support.v4.widget.DrawerLayout: boolean isContentView(android.view.View)>($r1);

        if $z0 == 0 goto label10;

        $i2 = $r4.<android.support.v4.widget.DrawerLayout$LayoutParams: int leftMargin>;

        $i2 = $i5 - $i2;

        $i7 = $r4.<android.support.v4.widget.DrawerLayout$LayoutParams: int rightMargin>;

        $i2 = $i2 - $i7;

        $i2 = staticinvoke <android.view.View$MeasureSpec: int makeMeasureSpec(int,int)>($i2, 1073741824);

        $i7 = $r4.<android.support.v4.widget.DrawerLayout$LayoutParams: int topMargin>;

        $i7 = $i6 - $i7;

        $i8 = $r4.<android.support.v4.widget.DrawerLayout$LayoutParams: int bottomMargin>;

        $i7 = $i7 - $i8;

        $i7 = staticinvoke <android.view.View$MeasureSpec: int makeMeasureSpec(int,int)>($i7, 1073741824);

        virtualinvoke $r1.<android.view.View: void measure(int,int)>($i2, $i7);

        goto label05;

     label10:
        $z0 = virtualinvoke $r0.<android.support.v4.widget.DrawerLayout: boolean isDrawerView(android.view.View)>($r1);

        if $z0 == 0 goto label12;

        $i2 = virtualinvoke $r0.<android.support.v4.widget.DrawerLayout: int getDrawerViewAbsoluteGravity(android.view.View)>($r1);

        $i2 = $i2 & 7;

        $i7 = 0 & $i2;

        if $i7 == 0 goto label11;

        $r5 = new java.lang.IllegalStateException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Child drawer has absolute gravity ");

        $r7 = staticinvoke <android.support.v4.widget.DrawerLayout: java.lang.String gravityToString(int)>($i2);

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" but this ");

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("DrawerLayout");

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" already has a ");

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("drawer view along that edge");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r7);

        throw $r5;

     label11:
        $i2 = $r0.<android.support.v4.widget.DrawerLayout: int mMinDrawerMargin>;

        $i7 = $r4.<android.support.v4.widget.DrawerLayout$LayoutParams: int leftMargin>;

        $i2 = $i2 + $i7;

        $i7 = $r4.<android.support.v4.widget.DrawerLayout$LayoutParams: int rightMargin>;

        $i2 = $i2 + $i7;

        $i7 = $r4.<android.support.v4.widget.DrawerLayout$LayoutParams: int width>;

        $i2 = staticinvoke <android.support.v4.widget.DrawerLayout: int getChildMeasureSpec(int,int,int)>($i0, $i2, $i7);

        $i7 = $r4.<android.support.v4.widget.DrawerLayout$LayoutParams: int topMargin>;

        $i8 = $r4.<android.support.v4.widget.DrawerLayout$LayoutParams: int bottomMargin>;

        $i7 = $i7 + $i8;

        $i8 = $r4.<android.support.v4.widget.DrawerLayout$LayoutParams: int height>;

        $i7 = staticinvoke <android.support.v4.widget.DrawerLayout: int getChildMeasureSpec(int,int,int)>($i1, $i7, $i8);

        virtualinvoke $r1.<android.view.View: void measure(int,int)>($i2, $i7);

        goto label05;

     label12:
        $r5 = new java.lang.IllegalStateException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Child ");

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r1);

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" at index ");

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i4);

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" does not have a valid layout_gravity - must be Gravity.LEFT, ");

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Gravity.RIGHT or Gravity.NO_GRAVITY");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r7);

        throw $r5;

     label13:
        return;
    }

    protected void onRestoreInstanceState(android.os.Parcelable)
    {
        android.support.v4.widget.DrawerLayout $r0;
        android.os.Parcelable $r1;
        android.support.v4.widget.DrawerLayout$SavedState $r2;
        int $i0;
        android.view.View $r3;

        $r0 := @this: android.support.v4.widget.DrawerLayout;

        $r1 := @parameter0: android.os.Parcelable;

        $r2 = (android.support.v4.widget.DrawerLayout$SavedState) $r1;

        $r1 = virtualinvoke $r2.<android.support.v4.widget.DrawerLayout$SavedState: android.os.Parcelable getSuperState()>();

        specialinvoke $r0.<android.view.ViewGroup: void onRestoreInstanceState(android.os.Parcelable)>($r1);

        $i0 = $r2.<android.support.v4.widget.DrawerLayout$SavedState: int openDrawerGravity>;

        if $i0 == 0 goto label1;

        $i0 = $r2.<android.support.v4.widget.DrawerLayout$SavedState: int openDrawerGravity>;

        $r3 = virtualinvoke $r0.<android.support.v4.widget.DrawerLayout: android.view.View findDrawerWithGravity(int)>($i0);

        if $r3 == null goto label1;

        virtualinvoke $r0.<android.support.v4.widget.DrawerLayout: void openDrawer(android.view.View)>($r3);

     label1:
        $i0 = $r2.<android.support.v4.widget.DrawerLayout$SavedState: int lockModeLeft>;

        virtualinvoke $r0.<android.support.v4.widget.DrawerLayout: void setDrawerLockMode(int,int)>($i0, 3);

        $i0 = $r2.<android.support.v4.widget.DrawerLayout$SavedState: int lockModeRight>;

        virtualinvoke $r0.<android.support.v4.widget.DrawerLayout: void setDrawerLockMode(int,int)>($i0, 5);

        return;
    }

    protected android.os.Parcelable onSaveInstanceState()
    {
        android.support.v4.widget.DrawerLayout $r0;
        android.support.v4.widget.DrawerLayout$SavedState $r1;
        android.os.Parcelable $r2;
        int $i0, $i1;
        android.view.View $r3;
        boolean $z0;
        android.view.ViewGroup$LayoutParams $r4;
        android.support.v4.widget.DrawerLayout$LayoutParams $r5;

        $r0 := @this: android.support.v4.widget.DrawerLayout;

        $r2 = specialinvoke $r0.<android.view.ViewGroup: android.os.Parcelable onSaveInstanceState()>();

        $r1 = new android.support.v4.widget.DrawerLayout$SavedState;

        specialinvoke $r1.<android.support.v4.widget.DrawerLayout$SavedState: void <init>(android.os.Parcelable)>($r2);

        $i0 = virtualinvoke $r0.<android.support.v4.widget.DrawerLayout: int getChildCount()>();

        $i1 = 0;

     label1:
        if $i1 >= $i0 goto label4;

        $r3 = virtualinvoke $r0.<android.support.v4.widget.DrawerLayout: android.view.View getChildAt(int)>($i1);

        $z0 = virtualinvoke $r0.<android.support.v4.widget.DrawerLayout: boolean isDrawerView(android.view.View)>($r3);

        if $z0 != 0 goto label3;

     label2:
        $i1 = $i1 + 1;

        goto label1;

     label3:
        $r4 = virtualinvoke $r3.<android.view.View: android.view.ViewGroup$LayoutParams getLayoutParams()>();

        $r5 = (android.support.v4.widget.DrawerLayout$LayoutParams) $r4;

        $z0 = $r5.<android.support.v4.widget.DrawerLayout$LayoutParams: boolean knownOpen>;

        if $z0 == 0 goto label2;

        $i0 = $r5.<android.support.v4.widget.DrawerLayout$LayoutParams: int gravity>;

        $r1.<android.support.v4.widget.DrawerLayout$SavedState: int openDrawerGravity> = $i0;

     label4:
        $i0 = $r0.<android.support.v4.widget.DrawerLayout: int mLockModeLeft>;

        $r1.<android.support.v4.widget.DrawerLayout$SavedState: int lockModeLeft> = $i0;

        $i0 = $r0.<android.support.v4.widget.DrawerLayout: int mLockModeRight>;

        $r1.<android.support.v4.widget.DrawerLayout$SavedState: int lockModeRight> = $i0;

        return $r1;
    }

    public boolean onTouchEvent(android.view.MotionEvent)
    {
        android.support.v4.widget.DrawerLayout $r0;
        android.view.MotionEvent $r1;
        float $f0, $f1, $f2;
        int $i0, $i1;
        android.support.v4.widget.ViewDragHelper $r2;
        boolean $z0, $z1;
        android.view.View $r3;
        byte $b2;

        $r0 := @this: android.support.v4.widget.DrawerLayout;

        $r1 := @parameter0: android.view.MotionEvent;

        $r2 = $r0.<android.support.v4.widget.DrawerLayout: android.support.v4.widget.ViewDragHelper mLeftDragger>;

        virtualinvoke $r2.<android.support.v4.widget.ViewDragHelper: void processTouchEvent(android.view.MotionEvent)>($r1);

        $r2 = $r0.<android.support.v4.widget.DrawerLayout: android.support.v4.widget.ViewDragHelper mRightDragger>;

        virtualinvoke $r2.<android.support.v4.widget.ViewDragHelper: void processTouchEvent(android.view.MotionEvent)>($r1);

        $i0 = virtualinvoke $r1.<android.view.MotionEvent: int getAction()>();

        $i0 = $i0 & 255;

        lookupswitch($i0)
        {
            case 0: goto label2;
            case 1: goto label3;
            case 2: goto label1;
            case 3: goto label6;
            default: goto label1;
        };

     label1:
        return 1;

     label2:
        $f1 = virtualinvoke $r1.<android.view.MotionEvent: float getX()>();

        $f0 = virtualinvoke $r1.<android.view.MotionEvent: float getY()>();

        $r0.<android.support.v4.widget.DrawerLayout: float mInitialMotionX> = $f1;

        $r0.<android.support.v4.widget.DrawerLayout: float mInitialMotionY> = $f0;

        $r0.<android.support.v4.widget.DrawerLayout: boolean mDisallowInterceptRequested> = 0;

        $r0.<android.support.v4.widget.DrawerLayout: boolean mChildrenCanceledTouch> = 0;

        return 1;

     label3:
        $f0 = virtualinvoke $r1.<android.view.MotionEvent: float getX()>();

        $f1 = virtualinvoke $r1.<android.view.MotionEvent: float getY()>();

        $z0 = 1;

        $r2 = $r0.<android.support.v4.widget.DrawerLayout: android.support.v4.widget.ViewDragHelper mLeftDragger>;

        $i1 = (int) $f0;

        $i0 = (int) $f1;

        $r3 = virtualinvoke $r2.<android.support.v4.widget.ViewDragHelper: android.view.View findTopChildUnder(int,int)>($i1, $i0);

        if $r3 == null goto label4;

        $z1 = virtualinvoke $r0.<android.support.v4.widget.DrawerLayout: boolean isContentView(android.view.View)>($r3);

        if $z1 == 0 goto label4;

        $f2 = $r0.<android.support.v4.widget.DrawerLayout: float mInitialMotionX>;

        $f0 = $f0 - $f2;

        $f2 = $r0.<android.support.v4.widget.DrawerLayout: float mInitialMotionY>;

        $f1 = $f1 - $f2;

        $r2 = $r0.<android.support.v4.widget.DrawerLayout: android.support.v4.widget.ViewDragHelper mLeftDragger>;

        $i0 = virtualinvoke $r2.<android.support.v4.widget.ViewDragHelper: int getTouchSlop()>();

        $f0 = $f0 * $f0;

        $f1 = $f1 * $f1;

        $f1 = $f0 + $f1;

        $i0 = $i0 * $i0;

        $f0 = (float) $i0;

        $b2 = $f1 cmpg $f0;

        if $b2 >= 0 goto label4;

        $r3 = virtualinvoke $r0.<android.support.v4.widget.DrawerLayout: android.view.View findOpenDrawer()>();

        if $r3 == null goto label4;

        $i0 = virtualinvoke $r0.<android.support.v4.widget.DrawerLayout: int getDrawerLockMode(android.view.View)>($r3);

        if $i0 != 2 goto label5;

        $z0 = 1;

     label4:
        virtualinvoke $r0.<android.support.v4.widget.DrawerLayout: void closeDrawers(boolean)>($z0);

        $r0.<android.support.v4.widget.DrawerLayout: boolean mDisallowInterceptRequested> = 0;

        return 1;

     label5:
        $z0 = 0;

        goto label4;

     label6:
        virtualinvoke $r0.<android.support.v4.widget.DrawerLayout: void closeDrawers(boolean)>(1);

        $r0.<android.support.v4.widget.DrawerLayout: boolean mDisallowInterceptRequested> = 0;

        $r0.<android.support.v4.widget.DrawerLayout: boolean mChildrenCanceledTouch> = 0;

        return 1;
    }

    public void openDrawer(int)
    {
        android.support.v4.widget.DrawerLayout $r0;
        int $i0;
        java.lang.IllegalArgumentException $r1;
        android.view.View $r2;
        java.lang.StringBuilder $r3;
        java.lang.String $r4;

        $r0 := @this: android.support.v4.widget.DrawerLayout;

        $i0 := @parameter0: int;

        $r2 = virtualinvoke $r0.<android.support.v4.widget.DrawerLayout: android.view.View findDrawerWithGravity(int)>($i0);

        if $r2 != null goto label1;

        $r1 = new java.lang.IllegalArgumentException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("No drawer view found with gravity ");

        $r4 = staticinvoke <android.support.v4.widget.DrawerLayout: java.lang.String gravityToString(int)>($i0);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r4);

        throw $r1;

     label1:
        virtualinvoke $r0.<android.support.v4.widget.DrawerLayout: void openDrawer(android.view.View)>($r2);

        return;
    }

    public void openDrawer(android.view.View)
    {
        android.support.v4.widget.DrawerLayout $r0;
        android.view.View $r1;
        boolean $z0;
        java.lang.IllegalArgumentException $r2;
        java.lang.StringBuilder $r3;
        java.lang.String $r4;
        android.view.ViewGroup$LayoutParams $r5;
        android.support.v4.widget.DrawerLayout$LayoutParams $r6;
        android.support.v4.widget.ViewDragHelper $r7;
        int $i0, $i1;

        $r0 := @this: android.support.v4.widget.DrawerLayout;

        $r1 := @parameter0: android.view.View;

        $z0 = virtualinvoke $r0.<android.support.v4.widget.DrawerLayout: boolean isDrawerView(android.view.View)>($r1);

        if $z0 != 0 goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("View ");

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r1);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is not a sliding drawer");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r4);

        throw $r2;

     label1:
        $z0 = $r0.<android.support.v4.widget.DrawerLayout: boolean mFirstLayout>;

        if $z0 == 0 goto label3;

        $r5 = virtualinvoke $r1.<android.view.View: android.view.ViewGroup$LayoutParams getLayoutParams()>();

        $r6 = (android.support.v4.widget.DrawerLayout$LayoutParams) $r5;

        $r6.<android.support.v4.widget.DrawerLayout$LayoutParams: float onScreen> = 1.0F;

        $r6.<android.support.v4.widget.DrawerLayout$LayoutParams: boolean knownOpen> = 1;

     label2:
        virtualinvoke $r0.<android.support.v4.widget.DrawerLayout: void invalidate()>();

        return;

     label3:
        $z0 = virtualinvoke $r0.<android.support.v4.widget.DrawerLayout: boolean checkDrawerViewAbsoluteGravity(android.view.View,int)>($r1, 3);

        if $z0 == 0 goto label4;

        $r7 = $r0.<android.support.v4.widget.DrawerLayout: android.support.v4.widget.ViewDragHelper mLeftDragger>;

        $i0 = virtualinvoke $r1.<android.view.View: int getTop()>();

        virtualinvoke $r7.<android.support.v4.widget.ViewDragHelper: boolean smoothSlideViewTo(android.view.View,int,int)>($r1, 0, $i0);

        goto label2;

     label4:
        $r7 = $r0.<android.support.v4.widget.DrawerLayout: android.support.v4.widget.ViewDragHelper mRightDragger>;

        $i0 = virtualinvoke $r0.<android.support.v4.widget.DrawerLayout: int getWidth()>();

        $i1 = virtualinvoke $r1.<android.view.View: int getWidth()>();

        $i0 = $i0 - $i1;

        $i1 = virtualinvoke $r1.<android.view.View: int getTop()>();

        virtualinvoke $r7.<android.support.v4.widget.ViewDragHelper: boolean smoothSlideViewTo(android.view.View,int,int)>($r1, $i0, $i1);

        goto label2;
    }

    public void requestDisallowInterceptTouchEvent(boolean)
    {
        android.support.v4.widget.DrawerLayout $r0;
        boolean $z0;

        $r0 := @this: android.support.v4.widget.DrawerLayout;

        $z0 := @parameter0: boolean;

        specialinvoke $r0.<android.view.ViewGroup: void requestDisallowInterceptTouchEvent(boolean)>($z0);

        $r0.<android.support.v4.widget.DrawerLayout: boolean mDisallowInterceptRequested> = $z0;

        if $z0 == 0 goto label1;

        virtualinvoke $r0.<android.support.v4.widget.DrawerLayout: void closeDrawers(boolean)>(1);

     label1:
        return;
    }

    public void requestLayout()
    {
        android.support.v4.widget.DrawerLayout $r0;
        boolean $z0;

        $r0 := @this: android.support.v4.widget.DrawerLayout;

        $z0 = $r0.<android.support.v4.widget.DrawerLayout: boolean mInLayout>;

        if $z0 != 0 goto label1;

        specialinvoke $r0.<android.view.ViewGroup: void requestLayout()>();

     label1:
        return;
    }

    public void setDrawerListener(android.support.v4.widget.DrawerLayout$DrawerListener)
    {
        android.support.v4.widget.DrawerLayout $r0;
        android.support.v4.widget.DrawerLayout$DrawerListener $r1;

        $r0 := @this: android.support.v4.widget.DrawerLayout;

        $r1 := @parameter0: android.support.v4.widget.DrawerLayout$DrawerListener;

        $r0.<android.support.v4.widget.DrawerLayout: android.support.v4.widget.DrawerLayout$DrawerListener mListener> = $r1;

        return;
    }

    public void setDrawerLockMode(int)
    {
        android.support.v4.widget.DrawerLayout $r0;
        int $i0;

        $r0 := @this: android.support.v4.widget.DrawerLayout;

        $i0 := @parameter0: int;

        virtualinvoke $r0.<android.support.v4.widget.DrawerLayout: void setDrawerLockMode(int,int)>($i0, 3);

        virtualinvoke $r0.<android.support.v4.widget.DrawerLayout: void setDrawerLockMode(int,int)>($i0, 5);

        return;
    }

    public void setDrawerLockMode(int, int)
    {
        android.support.v4.widget.DrawerLayout $r0;
        int $i0, $i1, $i2;
        android.support.v4.widget.ViewDragHelper $r1;
        android.view.View $r2;

        $r0 := @this: android.support.v4.widget.DrawerLayout;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $i2 = staticinvoke <android.support.v4.view.ViewCompat: int getLayoutDirection(android.view.View)>($r0);

        $i1 = staticinvoke <android.support.v4.view.GravityCompat: int getAbsoluteGravity(int,int)>($i1, $i2);

        if $i1 != 3 goto label5;

        $r0.<android.support.v4.widget.DrawerLayout: int mLockModeLeft> = $i0;

     label1:
        if $i0 == 0 goto label3;

        if $i1 != 3 goto label6;

        $r1 = $r0.<android.support.v4.widget.DrawerLayout: android.support.v4.widget.ViewDragHelper mLeftDragger>;

     label2:
        virtualinvoke $r1.<android.support.v4.widget.ViewDragHelper: void cancel()>();

     label3:
        lookupswitch($i0)
        {
            case 1: goto label8;
            case 2: goto label7;
            default: goto label4;
        };

     label4:
        return;

     label5:
        if $i1 != 5 goto label1;

        $r0.<android.support.v4.widget.DrawerLayout: int mLockModeRight> = $i0;

        goto label1;

     label6:
        $r1 = $r0.<android.support.v4.widget.DrawerLayout: android.support.v4.widget.ViewDragHelper mRightDragger>;

        goto label2;

     label7:
        $r2 = virtualinvoke $r0.<android.support.v4.widget.DrawerLayout: android.view.View findDrawerWithGravity(int)>($i1);

        if $r2 == null goto label9;

        virtualinvoke $r0.<android.support.v4.widget.DrawerLayout: void openDrawer(android.view.View)>($r2);

        return;

     label8:
        $r2 = virtualinvoke $r0.<android.support.v4.widget.DrawerLayout: android.view.View findDrawerWithGravity(int)>($i1);

        if $r2 == null goto label9;

        virtualinvoke $r0.<android.support.v4.widget.DrawerLayout: void closeDrawer(android.view.View)>($r2);

     label9:
        return;
    }

    public void setDrawerLockMode(int, android.view.View)
    {
        android.support.v4.widget.DrawerLayout $r0;
        int $i0, $i1;
        android.view.View $r1;
        boolean $z0;
        java.lang.IllegalArgumentException $r2;
        java.lang.StringBuilder $r3;
        java.lang.String $r4;
        android.view.ViewGroup$LayoutParams $r5;
        android.support.v4.widget.DrawerLayout$LayoutParams $r6;

        $r0 := @this: android.support.v4.widget.DrawerLayout;

        $i0 := @parameter0: int;

        $r1 := @parameter1: android.view.View;

        $z0 = virtualinvoke $r0.<android.support.v4.widget.DrawerLayout: boolean isDrawerView(android.view.View)>($r1);

        if $z0 != 0 goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("View ");

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r1);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is not a ");

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("drawer with appropriate layout_gravity");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r4);

        throw $r2;

     label1:
        $r5 = virtualinvoke $r1.<android.view.View: android.view.ViewGroup$LayoutParams getLayoutParams()>();

        $r6 = (android.support.v4.widget.DrawerLayout$LayoutParams) $r5;

        $i1 = $r6.<android.support.v4.widget.DrawerLayout$LayoutParams: int gravity>;

        virtualinvoke $r0.<android.support.v4.widget.DrawerLayout: void setDrawerLockMode(int,int)>($i0, $i1);

        return;
    }

    public void setDrawerShadow(int, int)
    {
        android.support.v4.widget.DrawerLayout $r0;
        int $i0, $i1;
        android.content.res.Resources $r1;
        android.graphics.drawable.Drawable $r2;

        $r0 := @this: android.support.v4.widget.DrawerLayout;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $r1 = virtualinvoke $r0.<android.support.v4.widget.DrawerLayout: android.content.res.Resources getResources()>();

        $r2 = virtualinvoke $r1.<android.content.res.Resources: android.graphics.drawable.Drawable getDrawable(int)>($i0);

        virtualinvoke $r0.<android.support.v4.widget.DrawerLayout: void setDrawerShadow(android.graphics.drawable.Drawable,int)>($r2, $i1);

        return;
    }

    public void setDrawerShadow(android.graphics.drawable.Drawable, int)
    {
        android.support.v4.widget.DrawerLayout $r0;
        android.graphics.drawable.Drawable $r1;
        int $i0, $i1;

        $r0 := @this: android.support.v4.widget.DrawerLayout;

        $r1 := @parameter0: android.graphics.drawable.Drawable;

        $i0 := @parameter1: int;

        $i1 = staticinvoke <android.support.v4.view.ViewCompat: int getLayoutDirection(android.view.View)>($r0);

        $i0 = staticinvoke <android.support.v4.view.GravityCompat: int getAbsoluteGravity(int,int)>($i0, $i1);

        $i1 = $i0 & 3;

        if $i1 != 3 goto label1;

        $r0.<android.support.v4.widget.DrawerLayout: android.graphics.drawable.Drawable mShadowLeft> = $r1;

        virtualinvoke $r0.<android.support.v4.widget.DrawerLayout: void invalidate()>();

     label1:
        $i0 = $i0 & 5;

        if $i0 != 5 goto label2;

        $r0.<android.support.v4.widget.DrawerLayout: android.graphics.drawable.Drawable mShadowRight> = $r1;

        virtualinvoke $r0.<android.support.v4.widget.DrawerLayout: void invalidate()>();

     label2:
        return;
    }

    public void setDrawerTitle(int, java.lang.CharSequence)
    {
        android.support.v4.widget.DrawerLayout $r0;
        int $i0, $i1;
        java.lang.CharSequence $r1;

        $r0 := @this: android.support.v4.widget.DrawerLayout;

        $i0 := @parameter0: int;

        $r1 := @parameter1: java.lang.CharSequence;

        $i1 = staticinvoke <android.support.v4.view.ViewCompat: int getLayoutDirection(android.view.View)>($r0);

        $i0 = staticinvoke <android.support.v4.view.GravityCompat: int getAbsoluteGravity(int,int)>($i0, $i1);

        if $i0 != 3 goto label1;

        $r0.<android.support.v4.widget.DrawerLayout: java.lang.CharSequence mTitleLeft> = $r1;

        return;

     label1:
        if $i0 != 5 goto label2;

        $r0.<android.support.v4.widget.DrawerLayout: java.lang.CharSequence mTitleRight> = $r1;

     label2:
        return;
    }

    void setDrawerViewOffset(android.view.View, float)
    {
        android.support.v4.widget.DrawerLayout $r0;
        android.view.View $r1;
        float $f0, $f1;
        android.view.ViewGroup$LayoutParams $r2;
        android.support.v4.widget.DrawerLayout$LayoutParams $r3;
        byte $b0;

        $r0 := @this: android.support.v4.widget.DrawerLayout;

        $r1 := @parameter0: android.view.View;

        $f0 := @parameter1: float;

        $r2 = virtualinvoke $r1.<android.view.View: android.view.ViewGroup$LayoutParams getLayoutParams()>();

        $r3 = (android.support.v4.widget.DrawerLayout$LayoutParams) $r2;

        $f1 = $r3.<android.support.v4.widget.DrawerLayout$LayoutParams: float onScreen>;

        $b0 = $f0 cmpl $f1;

        if $b0 != 0 goto label1;

        return;

     label1:
        $r3.<android.support.v4.widget.DrawerLayout$LayoutParams: float onScreen> = $f0;

        virtualinvoke $r0.<android.support.v4.widget.DrawerLayout: void dispatchOnDrawerSlide(android.view.View,float)>($r1, $f0);

        return;
    }

    public void setScrimColor(int)
    {
        android.support.v4.widget.DrawerLayout $r0;
        int $i0;

        $r0 := @this: android.support.v4.widget.DrawerLayout;

        $i0 := @parameter0: int;

        $r0.<android.support.v4.widget.DrawerLayout: int mScrimColor> = $i0;

        virtualinvoke $r0.<android.support.v4.widget.DrawerLayout: void invalidate()>();

        return;
    }

    void updateDrawerState(int, int, android.view.View)
    {
        android.support.v4.widget.DrawerLayout $r0;
        int $i0, $i1, $i2;
        android.view.View $r1;
        android.support.v4.widget.ViewDragHelper $r2;
        byte $b3, $b4;
        android.view.ViewGroup$LayoutParams $r3;
        android.support.v4.widget.DrawerLayout$LayoutParams $r4;
        float $f0;
        android.support.v4.widget.DrawerLayout$DrawerListener $r5;

        $r0 := @this: android.support.v4.widget.DrawerLayout;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $r1 := @parameter2: android.view.View;

        $r2 = $r0.<android.support.v4.widget.DrawerLayout: android.support.v4.widget.ViewDragHelper mLeftDragger>;

        $i0 = virtualinvoke $r2.<android.support.v4.widget.ViewDragHelper: int getViewDragState()>();

        $r2 = $r0.<android.support.v4.widget.DrawerLayout: android.support.v4.widget.ViewDragHelper mRightDragger>;

        $i2 = virtualinvoke $r2.<android.support.v4.widget.ViewDragHelper: int getViewDragState()>();

        if $i0 == 1 goto label1;

        if $i2 != 1 goto label4;

     label1:
        $b3 = 1;

     label2:
        if $r1 == null goto label3;

        if $i1 != 0 goto label3;

        $r3 = virtualinvoke $r1.<android.view.View: android.view.ViewGroup$LayoutParams getLayoutParams()>();

        $r4 = (android.support.v4.widget.DrawerLayout$LayoutParams) $r3;

        $f0 = $r4.<android.support.v4.widget.DrawerLayout$LayoutParams: float onScreen>;

        $b4 = $f0 cmpl 0.0F;

        if $b4 != 0 goto label7;

        virtualinvoke $r0.<android.support.v4.widget.DrawerLayout: void dispatchOnDrawerClosed(android.view.View)>($r1);

     label3:
        $i0 = $r0.<android.support.v4.widget.DrawerLayout: int mDrawerState>;

        if $b3 == $i0 goto label8;

        $r0.<android.support.v4.widget.DrawerLayout: int mDrawerState> = $b3;

        $r5 = $r0.<android.support.v4.widget.DrawerLayout: android.support.v4.widget.DrawerLayout$DrawerListener mListener>;

        if $r5 == null goto label8;

        $r5 = $r0.<android.support.v4.widget.DrawerLayout: android.support.v4.widget.DrawerLayout$DrawerListener mListener>;

        interfaceinvoke $r5.<android.support.v4.widget.DrawerLayout$DrawerListener: void onDrawerStateChanged(int)>($b3);

        return;

     label4:
        if $i0 == 2 goto label5;

        if $i2 != 2 goto label6;

     label5:
        $b3 = 2;

        goto label2;

     label6:
        $b3 = 0;

        goto label2;

     label7:
        $f0 = $r4.<android.support.v4.widget.DrawerLayout$LayoutParams: float onScreen>;

        $b4 = $f0 cmpl 1.0F;

        if $b4 != 0 goto label3;

        virtualinvoke $r0.<android.support.v4.widget.DrawerLayout: void dispatchOnDrawerOpened(android.view.View)>($r1);

        goto label3;

     label8:
        return;
    }
}
